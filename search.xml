<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Java--业务场景：在Spring项目启动时加载Java枚举类到Redis中</title>
      <link href="/posts/jywcjzsxmqdsjzjmjldrz/"/>
      <url>/posts/jywcjzsxmqdsjzjmjldrz/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><ul><li>新的一年即将来到，回首2023年，也是学习了许多，不断进步。今天带来的是项目中遇到的一个业务要求处理方法总结：项目具有很多的枚举类，而这些枚举类在前端页面中需要作为下拉框选项等组件被前端获取。为了后续获取枚举值更加方便快捷，我们在项目启动的时候将所有Java枚举类用一个hash存入Redis中，在提供一个接口，使得前端可以从Redis获取自己想要的枚举值。下文将讲解实现步骤。</li></ul><h4 id="实现项目启动时加载枚举值到Redis"><a href="#实现项目启动时加载枚举值到Redis" class="headerlink" title="实现项目启动时加载枚举值到Redis"></a>实现项目启动时加载枚举值到Redis</h4><h5 id="1-定义EnumInterface接口"><a href="#1-定义EnumInterface接口" class="headerlink" title="1. 定义EnumInterface接口"></a>1. 定义EnumInterface接口</h5><ul><li>定义EnumInterface接口，实现该接口的枚举类会在后续被识别，在项目启动时加入redis<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">EnumInterface</span> &#123;</span><br><span class="line"></span><br><span class="line">    String <span class="title function_">getCode</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    String <span class="title function_">getDesc</span><span class="params">()</span>;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">//枚举类描述 该值后续会与枚举类名拼接 成为Redis hash的key  </span></span><br><span class="line">    String <span class="title function_">enumDesc</span><span class="params">()</span>;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h5 id="2-创建EnumDTO"><a href="#2-创建EnumDTO" class="headerlink" title="2. 创建EnumDTO"></a>2. 创建EnumDTO</h5></li><li>创建EnumDTO，将存放每个枚举类对象，同一个枚举类的所有对象最终会放入同一个列表，作为Redis hash的value。<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@ApiModel(value = &quot;EnumDto&quot;, description = &quot;【枚举值-枚举值DTO】&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EnumDto</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">serialVersionUID</span> <span class="operator">=</span> <span class="number">1L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiModelProperty(value = &quot;枚举值类型-对应枚举值类名&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String typeEn;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiModelProperty(value = &quot;枚举值类型-对应枚举值类名的desc描述信息&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">String</span> <span class="variable">typeCh</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiModelProperty(value = &quot;枚举值类型-对应枚举值的code值&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String code;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiModelProperty(value = &quot;枚举值类型-对应枚举值的desc值&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String desc;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiModelProperty(value = &quot;枚举值类型-对应枚举实例的名字&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String enumName;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="3-创建ClassUtils工具类"><a href="#3-创建ClassUtils工具类" class="headerlink" title="3. 创建ClassUtils工具类"></a>3. 创建ClassUtils工具类</h5></li><li>该类提供一个方法，通过Java反射获取某个包中所有的枚举类，将它们存入列表。<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ClassUtils</span> &#123;</span><br><span class="line">    <span class="comment">//为了方便管理，我们将枚举类放在同一个包下，这里写入自己项目中枚举类所在的包名。</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">PACKAGE_NAME</span> <span class="operator">=</span> <span class="string">&quot;com.common.base.enums&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> List&lt;Class&lt;Enum&gt;&gt; <span class="title function_">getAllEnumClasses</span><span class="params">()</span> <span class="keyword">throws</span> ClassNotFoundException, IOException &#123;</span><br><span class="line">        List&lt;Class&lt;Enum&gt;&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (String className : getClassName(PACKAGE_NAME, <span class="literal">true</span>)) &#123;</span><br><span class="line">            Class&lt;?&gt; clazz = Class.forName(className);</span><br><span class="line">            <span class="keyword">if</span> (Enum.class.isAssignableFrom(clazz) &amp;&amp; EnumInterface.class.isAssignableFrom(clazz)) &#123;</span><br><span class="line">                list.add((Class&lt;Enum&gt;) clazz);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> list;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取某包下的所有类</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> packageName  包名</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> childPackage 是否遍历子包</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> List&lt;String&gt; <span class="title function_">getClassName</span><span class="params">(String packageName, <span class="type">boolean</span> childPackage)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        List&lt;String&gt; fileNames = <span class="literal">null</span>;</span><br><span class="line">        <span class="type">ClassLoader</span> <span class="variable">loader</span> <span class="operator">=</span> Thread.currentThread().getContextClassLoader();</span><br><span class="line">        <span class="type">String</span> <span class="variable">packagePath</span> <span class="operator">=</span> packageName.replace(<span class="string">&quot;.&quot;</span>, <span class="string">&quot;/&quot;</span>);</span><br><span class="line">        <span class="type">URL</span> <span class="variable">url</span> <span class="operator">=</span> loader.getResource(packagePath);</span><br><span class="line">        <span class="keyword">if</span> (url != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">type</span> <span class="operator">=</span> url.getProtocol();</span><br><span class="line">            <span class="keyword">if</span> (type.equals(<span class="string">&quot;file&quot;</span>)) &#123;</span><br><span class="line">                fileNames = getClassNameByFile(url.getPath(), childPackage);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            fileNames = getClassNameByJars(((URLClassLoader) loader).getURLs(), packagePath, childPackage);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> fileNames;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 从项目文件获取某包下所有类</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> List&lt;String&gt; <span class="title function_">getClassNameByFile</span><span class="params">(String filePath, <span class="type">boolean</span> childPackage)</span> <span class="keyword">throws</span> UnsupportedEncodingException &#123;</span><br><span class="line">        List&lt;String&gt; myClassName = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="comment">// 解决路径包含中文的情况</span></span><br><span class="line">        filePath = java.net.URLDecoder.decode(filePath,<span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line">        <span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(filePath);</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">exists</span> <span class="operator">=</span> file.exists();</span><br><span class="line">        File[] childFiles = file.listFiles();</span><br><span class="line">        <span class="keyword">assert</span> childFiles != <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">for</span> (File childFile : childFiles) &#123;</span><br><span class="line">            <span class="keyword">if</span> (childFile.isDirectory()) &#123;</span><br><span class="line">                <span class="keyword">if</span> (childPackage) &#123;</span><br><span class="line">                    myClassName.addAll(getClassNameByFile(childFile.getPath(), childPackage));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="type">String</span> <span class="variable">childFilePath</span> <span class="operator">=</span> childFile.getPath();</span><br><span class="line">                <span class="keyword">if</span> (childFilePath.endsWith(<span class="string">&quot;.class&quot;</span>)) &#123;</span><br><span class="line">                    childFilePath = childFilePath.substring(childFilePath.indexOf(<span class="string">&quot;\\classes&quot;</span>) + <span class="number">9</span>,</span><br><span class="line">                            childFilePath.lastIndexOf(<span class="string">&quot;.&quot;</span>));</span><br><span class="line">                    childFilePath = childFilePath.replace(<span class="string">&quot;\\&quot;</span>, <span class="string">&quot;.&quot;</span>);</span><br><span class="line">                    myClassName.add(childFilePath);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> myClassName;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="4-创建EnumService接口"><a href="#4-创建EnumService接口" class="headerlink" title="4. 创建EnumService接口"></a>4. 创建EnumService接口</h5></li><li>创建EnumService接口，声明有关枚举类操作的接口<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">EnumService</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 扫描路径下的所有JAVA枚举类，并加载到redis缓存中</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">scanAndLoadEnumClassToRedis</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="5-创建EnumServiceImpl"><a href="#5-创建EnumServiceImpl" class="headerlink" title="5. 创建EnumServiceImpl"></a>5. 创建EnumServiceImpl</h5></li><li>创建EnumService实现类EnumServiceImpl，实现scanAndLoadEnumClassToRedis方法，该方法实现将枚举值加载到Redis中<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EnumServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">EnumService</span> &#123;   </span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RedisOperation redisOperation;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">scanAndLoadEnumClassToRedis</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//声明Redis中存放的数据结构</span></span><br><span class="line">            Map&lt;String, List&lt;EnumDto&gt;&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">            <span class="comment">//先删除原来的枚举类key，RedisKeyConstant.SYSTEM_ENUMS_CACHE_KEY 为存放缓存的key字符串，在常量类中自己定义</span></span><br><span class="line">            redisOperation.del(RedisKeyConstant.SYSTEM_ENUMS_CACHE_KEY);</span><br><span class="line">            <span class="comment">//通过ClassUtils得到枚举类名，反射得到属性，填充属性到EnumDto中</span></span><br><span class="line">            ClassUtils.getAllEnumClasses().forEach(enumClass -&gt; &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    EnumInterface[] enumInterfaces = (EnumInterface[]) enumClass.getMethod(<span class="string">&quot;values&quot;</span>).invoke(<span class="keyword">new</span> <span class="title class_">Object</span>());</span><br><span class="line">                    Arrays.stream(enumInterfaces).forEach(enumInterface -&gt; &#123;</span><br><span class="line">                        <span class="type">EnumDto</span> <span class="variable">enumDto</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">EnumDto</span>();</span><br><span class="line">                        enumDto.setCode(enumInterface.getCode());</span><br><span class="line">                        enumDto.setTypeEn(enumClass.getName());</span><br><span class="line">                        enumDto.setTypeCh(enumInterface.enumDesc());</span><br><span class="line">                        enumDto.setDesc(enumInterface.getDesc());</span><br><span class="line">                        enumDto.setEnumName(((Enum) enumInterface).name());</span><br><span class="line">                        <span class="comment">//hash的key：枚举值类名|枚举类描述信息</span></span><br><span class="line">                        <span class="comment">//hash的value：List&lt;EnumDto&gt;</span></span><br><span class="line">                        <span class="type">String</span> <span class="variable">key</span> <span class="operator">=</span> enumClass.getName() + <span class="string">&quot;|&quot;</span> + enumInterface.enumDesc();</span><br><span class="line">                        <span class="keyword">if</span> (<span class="literal">null</span> == map.get(key)) &#123;</span><br><span class="line">                            List&lt;EnumDto&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">                            list.add(enumDto);</span><br><span class="line">                            map.put(key, list);</span><br><span class="line">                        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                            map.get(key).add(enumDto);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                    log.error(<span class="string">&quot;加载JAVA枚举值失败&quot;</span>, e);</span><br><span class="line">                    redisOperation.del(RedisKeyConstant.SYSTEM_ENUMS_CACHE_KEY);</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">ProcessException</span>(CommonConstants.ENUM_PROCESSING_EXCEPTION, <span class="string">&quot;加载JAVA枚举值到Reids中发生错误,请检查代码！&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">            map.forEach((key, val) -&gt; </span><br><span class="line">                <span class="comment">//存入Redis</span></span><br><span class="line">                redisOperation.hset(RedisKeyConstant.SYSTEM_ENUMS_CACHE_KEY, key, val)</span><br><span class="line">            );</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            log.error(<span class="string">&quot;加载JAVA枚举值失败&quot;</span>, e);</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">ProcessException</span>(CommonConstants.ENUM_PROCESSING_EXCEPTION, <span class="string">&quot;加载JAVA枚举值到Reids中发生错误,请检查代码！&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="6-修改枚举类"><a href="#6-修改枚举类" class="headerlink" title="6. 修改枚举类"></a>6. 修改枚举类</h5></li><li>让需要加载到Redis中的枚举类实现EnumInterface接口，记得重写enumDesc方法，给枚举类们加上描述，这个描述很重要，以下是一个例子。<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> <span class="title class_">OperationTypeEnum</span> <span class="keyword">implements</span> <span class="title class_">EnumInterface</span> &#123;</span><br><span class="line">    UPDATE(<span class="string">&quot;update&quot;</span>, <span class="string">&quot;更新&quot;</span>),</span><br><span class="line">    DELETE(<span class="string">&quot;delete&quot;</span>, <span class="string">&quot;删除&quot;</span>),</span><br><span class="line">    ADD(<span class="string">&quot;add&quot;</span>,<span class="string">&quot;增加&quot;</span>),</span><br><span class="line">    GET(<span class="string">&quot;show&quot;</span>,<span class="string">&quot;展示&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String code;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String desc;</span><br><span class="line"></span><br><span class="line">    OperationTypeEnum(String code, String desc) &#123;</span><br><span class="line">      <span class="built_in">this</span>.code = code;</span><br><span class="line">      <span class="built_in">this</span>.desc = desc;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getCode</span><span class="params">()</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> code;</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">enumDesc</span><span class="params">()</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="string">&quot;操作类型&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getDesc</span><span class="params">()</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="built_in">this</span>.desc;</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">getDesc</span><span class="params">(String code)</span> &#123;</span><br><span class="line">      <span class="keyword">for</span> (OperationTypeEnum publishEnum : OperationTypeEnum.values()) &#123;</span><br><span class="line">        <span class="keyword">if</span> (publishEnum.getCode().equals(code)) &#123;</span><br><span class="line">          <span class="keyword">return</span> publishEnum.getDesc();</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> OperationTypeEnum <span class="title function_">getByCode</span><span class="params">(String code)</span> &#123;</span><br><span class="line">      <span class="keyword">for</span> (OperationTypeEnum examSourceTypeEnum : OperationTypeEnum.values()) &#123;</span><br><span class="line">        <span class="keyword">if</span> (examSourceTypeEnum.getCode().equals(code)) &#123;</span><br><span class="line">          <span class="keyword">return</span> examSourceTypeEnum;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="7-创建ApplicationInit"><a href="#7-创建ApplicationInit" class="headerlink" title="7. 创建ApplicationInit"></a>7. 创建ApplicationInit</h5></li><li>ContextRefreshedEvent是Spring内置的上下文更新事件，该事件会在ApplicationContext被初始化或者更新时发布。<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 枚举值初始化</span></span><br><span class="line"><span class="comment"> * 系统启动的时候，将枚举值全部刷新一遍</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"> <span class="meta">@Slf4j</span></span><br><span class="line"> <span class="meta">@Component</span></span><br><span class="line"> <span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ApplicationInit</span> <span class="keyword">implements</span> <span class="title class_">ApplicationListener</span>&lt;ContextRefreshedEvent&gt; &#123;</span><br><span class="line">     <span class="meta">@Autowired</span></span><br><span class="line">     <span class="keyword">private</span> EnumService enumService;</span><br><span class="line">     <span class="meta">@Override</span></span><br><span class="line">     <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onApplicationEvent</span><span class="params">(ContextRefreshedEvent event)</span> &#123;</span><br><span class="line">        log.info(<span class="string">&quot;================开始初始化系统数据===========&quot;</span>);</span><br><span class="line">        log.info(<span class="string">&quot;开始加载JAVA枚举值列表&quot;</span>);</span><br><span class="line">        enumService.scanAndLoadEnumClassToRedis();</span><br><span class="line">        log.info(<span class="string">&quot;加载枚举值列表完成&quot;</span>);</span><br><span class="line">        log.info(<span class="string">&quot;================初始化系统数据结束===========&quot;</span>);</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="测试结果"><a href="#测试结果" class="headerlink" title="测试结果"></a>测试结果</h4><ul><li><p>上面的步骤完成后，就可以启动项目了，查看日志结果了：<br><img src="https://gcore.jsdelivr.net/gh/zhengmuxin/picb/a3ea23a9a28b4b689ea80cbeec9d20f0.png" alt="在这里插入图片描述"></p></li><li><p>日志成功打印之后，进入Redis可视化工具，可以看到Redis的枚举值已经存进去了，大功告成。<br><img src="https://gcore.jsdelivr.net/gh/zhengmuxin/picb/96b8de1500da46e4aa8b8a147fcb7393.png" alt="在这里插入图片描述"></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Spring </tag>
            
            <tag> Redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java--业务场景：SpringBoot 通过Redis进行IP封禁实现接口防刷</title>
      <link href="/posts/jywcjstgrjxifjsxjkfs/"/>
      <url>/posts/jywcjstgrjxifjsxjkfs/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><ul><li>在实际项目中，有些攻击者会使用自动化工具来频繁刷新接口，造成系统的瞬时吞吐量提高，给系统带来很大的压力。要保障服务的安全性，需要防止重要的接口被恶意刷新，接口防刷的方式可以通过设置验证码，IP封禁，安全参数校验等方法。</li><li>本文主要采用Redis将同一时间内频繁访问同一接口的IP封禁一段时间的方式来防止接口被恶意刷新。</li></ul><h3 id="具体实现步骤"><a href="#具体实现步骤" class="headerlink" title="具体实现步骤"></a>具体实现步骤</h3><h4 id="1-定义自定义注解"><a href="#1-定义自定义注解" class="headerlink" title="1. 定义自定义注解"></a>1. 定义自定义注解</h4><ul><li>添加了该注解的接口，将开启接口防刷功能。  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 防刷注解</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"> <span class="meta">@Target(ElementType.METHOD)</span></span><br><span class="line"> <span class="meta">@Documented</span></span><br><span class="line"> <span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"> <span class="keyword">public</span> <span class="meta">@interface</span> AccessLimit &#123;</span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 表示规定的时间范围</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="type">int</span> <span class="title function_">seconds</span><span class="params">()</span>;</span><br><span class="line">    </span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 表示在规定的时间范围内最多可被访问的次数</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="type">int</span> <span class="title function_">maxCount</span><span class="params">()</span>;</span><br><span class="line">    </span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 表示该接口是否需要登录，默认为true</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="type">boolean</span> <span class="title function_">needLogin</span><span class="params">()</span> <span class="keyword">default</span> <span class="literal">true</span>;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><h4 id="2-编写拦截器类IpUrlLimitInterceptor"><a href="#2-编写拦截器类IpUrlLimitInterceptor" class="headerlink" title="2. 编写拦截器类IpUrlLimitInterceptor"></a>2. 编写拦截器类IpUrlLimitInterceptor</h4></li><li>核心拦截器IpUrlLimitInterceptor的代码如下：<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">IpUrlLimitInterceptor</span> <span class="keyword">implements</span> <span class="title class_">HandlerInterceptor</span> &#123;</span><br><span class="line">  </span><br><span class="line">   <span class="meta">@Autowired</span></span><br><span class="line">   RedisUtil redisUtil; <span class="comment">//redis工具类</span></span><br><span class="line">   <span class="meta">@Autowired</span></span><br><span class="line">   <span class="keyword">private</span> TokenManager tokenManager; <span class="comment">//登录时的token检验管理器</span></span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">LOCK_IP_URL_KEY</span> <span class="operator">=</span> <span class="string">&quot;lock_ip_&quot;</span>;</span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">IP_URL_REQ_TIME</span> <span class="operator">=</span> <span class="string">&quot;ip_url_times_&quot;</span>;</span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">IP_LOCK_TIME</span> <span class="operator">=</span> <span class="number">60</span>; <span class="comment">//IP被禁用的时间 此处为了方便测试，设置为一分钟 实际情况应该在配置文件里设置</span></span><br><span class="line">  </span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">preHandle</span><span class="params">(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse, Object o)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">     <span class="keyword">if</span> (o <span class="keyword">instanceof</span> HandlerMethod) &#123;</span><br><span class="line">        <span class="type">HandlerMethod</span> <span class="variable">hm</span> <span class="operator">=</span> (HandlerMethod) o;</span><br><span class="line">        <span class="comment">// 获取AccessLimit注解</span></span><br><span class="line">        <span class="type">AccessLimit</span> <span class="variable">accessLimit</span> <span class="operator">=</span> hm.getMethodAnnotation(AccessLimit.class);</span><br><span class="line">        <span class="keyword">if</span>(Objects.isNull(accessLimit))&#123;</span><br><span class="line">           <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        log.info(<span class="string">&quot;request请求地址uri=&#123;&#125;,ip=&#123;&#125;&quot;</span>, httpServletRequest.getRequestURI(), IpUtil.getIp(httpServletRequest));</span><br><span class="line">        <span class="comment">//判断IP是否被锁定，若被锁定则访问异常提示信息</span></span><br><span class="line">        <span class="keyword">if</span> (ipIsLock(IpUtil.getIp(httpServletRequest))) &#123;</span><br><span class="line">           log.info(<span class="string">&quot;ip访问被禁止=&#123;&#125;&quot;</span>, IpUtil.getIp(httpServletRequest));</span><br><span class="line">           <span class="type">Result</span> <span class="variable">result</span> <span class="operator">=</span> Result.exception().code(ResultCode.LOCK_IP).message(<span class="string">&quot;该IP已被锁定，请等候解锁&quot;</span>);</span><br><span class="line">           returnJson(httpServletResponse, JSON.toJSONString(result));</span><br><span class="line">           <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//接口若需要登录，则校验token</span></span><br><span class="line">        <span class="comment">//获取请求头里的token信息判断是否正确，若token不正确，则return false</span></span><br><span class="line">        <span class="keyword">if</span>(accessLimit.needLogin()&amp;&amp;!tokenManager.checkToken(httpServletRequest.getHeader(<span class="string">&quot;Authorization&quot;</span>)))&#123; </span><br><span class="line">           <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//记录请求次数，记录后若大于规定时间内的规定次数则返回异常提示信息</span></span><br><span class="line">        <span class="keyword">if</span> (!addRequestTime(IpUtil.getIp(httpServletRequest), httpServletRequest.getRequestURI(), accessLimit.seconds(),accessLimit.maxCount())) &#123;</span><br><span class="line">           <span class="type">Result</span> <span class="variable">result</span> <span class="operator">=</span> Result.exception().code(ResultCode.LOCK_IP).message(<span class="string">&quot;该IP已被锁定，请等候解锁&quot;</span>);</span><br><span class="line">           returnJson(httpServletResponse, JSON.toJSONString(result));</span><br><span class="line">           <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">   &#125;</span><br><span class="line">  </span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">postHandle</span><span class="params">(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse, Object o, ModelAndView modelAndView)</span> <span class="keyword">throws</span> Exception &#123;&#125;</span><br><span class="line">  </span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterCompletion</span><span class="params">(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse, Object o, Exception e)</span> <span class="keyword">throws</span> Exception &#123;&#125;</span><br><span class="line">  </span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> ip</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span> java.lang.Boolean</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@Description</span>: 判断ip是否被禁用</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="keyword">private</span> Boolean <span class="title function_">ipIsLock</span><span class="params">(String ip)</span> &#123;</span><br><span class="line">     <span class="keyword">if</span> (redisUtil.hasKey(LOCK_IP_URL_KEY + ip)) &#123;</span><br><span class="line">       <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">   &#125;</span><br><span class="line">  </span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> ip</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> uri</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span> java.lang.Boolean</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@Description</span>: 记录请求次数</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="keyword">private</span> Boolean <span class="title function_">addRequestTime</span><span class="params">(String ip, String uri,<span class="type">int</span> seconds,<span class="type">int</span> maxCount)</span> &#123;</span><br><span class="line">     <span class="type">String</span> <span class="variable">key</span> <span class="operator">=</span> IP_URL_REQ_TIME + ip + uri;</span><br><span class="line">     <span class="keyword">if</span> (redisUtil.hasKey(key)) &#123;</span><br><span class="line">       <span class="comment">//访问次数加1</span></span><br><span class="line">       <span class="type">long</span> <span class="variable">time</span> <span class="operator">=</span> redisUtil.incrBy(key, <span class="number">1</span>);</span><br><span class="line">       <span class="keyword">if</span> (time &gt;= maxCount) &#123;</span><br><span class="line">         redisUtil.getLock(LOCK_IP_URL_KEY + ip, ip, IP_LOCK_TIME);</span><br><span class="line">         <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">       &#125;</span><br><span class="line">     &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">       <span class="comment">//seconds秒内访问maxCount次就锁柱</span></span><br><span class="line">       redisUtil.getLock(key, <span class="number">1</span>, seconds);</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">   &#125;</span><br><span class="line">  </span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">returnJson</span><span class="params">(HttpServletResponse response, String json)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">     <span class="type">PrintWriter</span> <span class="variable">writer</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">     response.setCharacterEncoding(<span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">     response.setContentType(<span class="string">&quot;text/json; charset=utf-8&quot;</span>);</span><br><span class="line">     <span class="keyword">try</span> &#123;</span><br><span class="line">       writer = response.getWriter();</span><br><span class="line">       writer.print(json);</span><br><span class="line">     &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">     log.error(<span class="string">&quot;LoginInterceptor response error ---&gt; &#123;&#125;&quot;</span>, e.getMessage(), e);</span><br><span class="line">     &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">       <span class="keyword">if</span> (writer != <span class="literal">null</span>) &#123;</span><br><span class="line">         writer.close();</span><br><span class="line">       &#125;</span><br><span class="line">     &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>上述代码中的RedisUtil具体方法如下，完整的RedisUtil类获取方式：<a href="https://download.csdn.net/download/weixin_46599489/88625919">Java - Redis操作的工具类RedisUtil</a><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RedisUtil</span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Long</span> <span class="variable">SUCCESS</span> <span class="operator">=</span> <span class="number">1L</span>;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Autowired</span></span><br><span class="line">  <span class="keyword">private</span> RedisTemplate&lt;String, Object&gt; redisTemplate;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 获取锁</span></span><br><span class="line"><span class="comment">   * 代码中redis的使用的是分布式锁的形式，这样可以最大程度保证线程安全和功能的实现效果。</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> lockKey</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> value</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> expireTime：单位-秒</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">getLock</span><span class="params">(String lockKey, Object value, <span class="type">int</span> expireTime)</span> &#123;</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">          log.info(<span class="string">&quot;添加分布式锁key=&#123;&#125;,expireTime=&#123;&#125;&quot;</span>, lockKey, expireTime);</span><br><span class="line">          <span class="type">String</span> <span class="variable">script</span> <span class="operator">=</span> <span class="string">&quot;if redis.call(&#x27;setnx&#x27;,KEYS[1],ARGV[1]) then if redis.call(&#x27;get&#x27;,KEYS[1])==ARGV[1] then return redis.call(&#x27;expire&#x27;,KEYS[1],ARGV[2]) else return 0 end end&quot;</span>;</span><br><span class="line">          RedisScript&lt;Long&gt; redisScript = <span class="keyword">new</span> <span class="title class_">DefaultRedisScript</span>&lt;&gt;(script, Long.class);</span><br><span class="line">          <span class="type">Object</span> <span class="variable">result</span> <span class="operator">=</span> redisTemplate.execute(redisScript, Collections.singletonList(lockKey), value, expireTime);</span><br><span class="line">          <span class="keyword">if</span> (SUCCESS.equals(result)) &#123;</span><br><span class="line">              <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">          &#125;</span><br><span class="line">      &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">          e.printStackTrace();</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//其他方法....</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>拦截器中的IpUtil工具类获取方式：<a href="https://download.csdn.net/download/weixin_46599489/88715883">Java-IpUtil通过请求获取IP信息的工具类</a><h4 id="3-在WebConfig类中添加IpUrlLimitInterceptor"><a href="#3-在WebConfig类中添加IpUrlLimitInterceptor" class="headerlink" title="3. 在WebConfig类中添加IpUrlLimitInterceptor"></a>3. 在WebConfig类中添加IpUrlLimitInterceptor</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">  <span class="meta">@Configuration</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WebConfig</span> <span class="keyword">extends</span> <span class="title class_">WebMvcConfigurerAdapter</span>  &#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    IpUrlLimitInterceptor <span class="title function_">getIpUrlLimitInterceptor</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">IpUrlLimitInterceptor</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 注册登录ip防刷拦截器</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addInterceptors</span><span class="params">(InterceptorRegistry registry)</span> &#123;</span><br><span class="line">        registry.addInterceptor(getIpUrlLimitInterceptor()).addPathPatterns(<span class="string">&quot;/**&quot;</span>);</span><br><span class="line">        <span class="built_in">super</span>.addInterceptors(registry);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4-添加注解到接口上"><a href="#4-添加注解到接口上" class="headerlink" title="4. 添加注解到接口上"></a>4. 添加注解到接口上</h4></li><li>编写一个接口，将刚刚的防刷注解添加上去<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/part/util&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UtilController</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 防刷注解测试</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/ipLimitTest&quot;)</span></span><br><span class="line">    <span class="meta">@AccessLimit(seconds = 1,maxCount = 5,needLogin = false)</span></span><br><span class="line">    <span class="comment">//表示一秒内该接口只能访问五次，防止恶意刷流量，这里接口无需登录</span></span><br><span class="line">    <span class="keyword">public</span> Result <span class="title function_">ipLimitTest</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Result.ok().data(<span class="string">&quot;访问成功&quot;</span>);</span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="测试效果"><a href="#测试效果" class="headerlink" title="测试效果"></a>测试效果</h3></li><li>手写一个for循环请求10次ipLimitTest()接口，观察日志情况如下:<br><img src="https://gcore.jsdelivr.net/gh/zhengmuxin/picb/e856eb5cb7a64047ac352ba704a9a02c.png" alt="在这里插入图片描述"></li></ul><ul><li>超过五次之后，该ip就被锁定1分钟。一分钟内的访问被禁止。此时查询redis的key，可以发现该ip锁住。<br><img src="https://gcore.jsdelivr.net/gh/zhengmuxin/picb/f952f0285fe44be8826540272178a856.png" alt="在这里插入图片描述"></li></ul><h3 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h3><p><a href="https://blog.csdn.net/weixin_48321993/article/details/125913385">如何解决SpringBoot 接口恶意刷新和暴力请求？（荣耀典藏版）</a></p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Spring </tag>
            
            <tag> Redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java -- 业务场景：获取请求的ip属地信息</title>
      <link href="/posts/jywcjhqqqdipsdxx/"/>
      <url>/posts/jywcjhqqqdipsdxx/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><ul><li>很多时候，项目里需要展示用户的IP属地信息，所以这篇文章就记录一下如何在Java Spring boot项目里获取请求的IP属地</li></ul><h3 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h3><h4 id="在pom文件中引入下列依赖"><a href="#在pom文件中引入下列依赖" class="headerlink" title="在pom文件中引入下列依赖"></a>在pom文件中引入下列依赖</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--   该依赖可以根据ip地址获取该ip相关的信息     --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>net.dreamlu<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mica-ip2region<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.5.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="IpUtil工具类"><a href="#IpUtil工具类" class="headerlink" title="IpUtil工具类"></a>IpUtil工具类</h4><ul><li>该工具类对HttpServletRequest解析，得到ip地址字符串<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">IpUtil</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取客户端ip</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> request</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">getIp</span><span class="params">(HttpServletRequest request)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">ip</span> <span class="operator">=</span> request.getHeader(<span class="string">&quot;x-forwarded-for&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (ip != <span class="literal">null</span> &amp;&amp; ip.length() != <span class="number">0</span> &amp;&amp; !<span class="string">&quot;unknown&quot;</span>.equalsIgnoreCase(ip)) &#123;</span><br><span class="line">            <span class="comment">// 多次反向代理后会有多个ip值，第一个ip才是真实ip</span></span><br><span class="line">            <span class="keyword">if</span> (ip.indexOf(<span class="string">&quot;,&quot;</span>) != -<span class="number">1</span>) &#123;</span><br><span class="line">                ip = ip.split(<span class="string">&quot;,&quot;</span>)[<span class="number">0</span>];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (ip == <span class="literal">null</span> || ip.length() == <span class="number">0</span> || <span class="string">&quot;unknown&quot;</span>.equalsIgnoreCase(ip)) &#123;</span><br><span class="line">            ip = request.getHeader(<span class="string">&quot;Proxy-Client-IP&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (ip == <span class="literal">null</span> || ip.length() == <span class="number">0</span> || <span class="string">&quot;unknown&quot;</span>.equalsIgnoreCase(ip)) &#123;</span><br><span class="line">            ip = request.getHeader(<span class="string">&quot;WL-Proxy-Client-IP&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (ip == <span class="literal">null</span> || ip.length() == <span class="number">0</span> || <span class="string">&quot;unknown&quot;</span>.equalsIgnoreCase(ip)) &#123;</span><br><span class="line">            ip = request.getHeader(<span class="string">&quot;HTTP_CLIENT_IP&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (ip == <span class="literal">null</span> || ip.length() == <span class="number">0</span> || <span class="string">&quot;unknown&quot;</span>.equalsIgnoreCase(ip)) &#123;</span><br><span class="line">            ip = request.getHeader(<span class="string">&quot;HTTP_X_FORWARDED_FOR&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (ip == <span class="literal">null</span> || ip.length() == <span class="number">0</span> || <span class="string">&quot;unknown&quot;</span>.equalsIgnoreCase(ip)) &#123;</span><br><span class="line">            ip = request.getHeader(<span class="string">&quot;X-Real-IP&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (ip == <span class="literal">null</span> || ip.length() == <span class="number">0</span> || <span class="string">&quot;unknown&quot;</span>.equalsIgnoreCase(ip)) &#123;</span><br><span class="line">            ip = request.getRemoteAddr();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ip;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="在Controller层编写接口，获取请求的IP属地"><a href="#在Controller层编写接口，获取请求的IP属地" class="headerlink" title="在Controller层编写接口，获取请求的IP属地"></a>在Controller层编写接口，获取请求的IP属地</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/part/util&quot;)</span></span><br><span class="line"><span class="meta">@Api(tags = &quot;工具类&quot;, value = &quot;UtilController&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UtilController</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> Ip2regionSearcher ip2regionSearcher; <span class="comment">// 核心处理类</span></span><br><span class="line">    </span><br><span class="line">    <span class="meta">@ApiOperation(value = &quot;获取ip属地&quot;)</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/ipCity&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getipCity</span><span class="params">(HttpServletRequest request)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">ip</span> <span class="operator">=</span> IpUtil.getIp(request);</span><br><span class="line">        <span class="type">IpInfo</span> <span class="variable">ipInfo</span> <span class="operator">=</span> ip2regionSearcher.memorySearch(ip);</span><br><span class="line">        <span class="type">String</span> <span class="variable">city</span> <span class="operator">=</span> ipInfo.getCity();</span><br><span class="line">        <span class="keyword">return</span> city;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="测试接口"><a href="#测试接口" class="headerlink" title="测试接口"></a>测试接口</h4></li><li>这里我的请求是内网ip，所以返回的结果是“内网ip”，有点像废话hhh。<br><img src="https://gcore.jsdelivr.net/gh/zhengmuxin/picb/f297692716eb4f2baac25eb6950a2685.png" alt="外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传"></li></ul><h3 id="IpInfo类中的方法"><a href="#IpInfo类中的方法" class="headerlink" title="IpInfo类中的方法"></a>IpInfo类中的方法</h3><p><img src="https://gcore.jsdelivr.net/gh/zhengmuxin/picb/c011378e3d004956a91c8b0d848ebdf1.png" alt="IpInfo"></p><p>简单介绍一下几个常见的方法</p><blockquote><p>ipInfo.getCountry(); // 国家中文名称<br>ipInfo.getProvince(); // 中国省份中文名称<br>ipInfo.getAddress(); // 详细地址<br>ipInfo.getIsp(); // 互联网服务提供商<br>ipInfo.isOverseas(); // 是否是国外<br>ipInfo.getLat(); // 纬度<br>ipInfo.getLng(); // 经度  </p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mybatis框架--Mybatis中的#{}和${}的区别是什么？</title>
      <link href="/posts/mkjmzd#h$dqbssm/"/>
      <url>/posts/mkjmzd#h$dqbssm/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h4 id="Mybatis中的-和-的区别是什么？"><a href="#Mybatis中的-和-的区别是什么？" class="headerlink" title="Mybatis中的#{}和${}的区别是什么？"></a>Mybatis中的#{}和${}的区别是什么？</h4><ul><li><p>Mybatis提供了#和$两种占位符，都是实现动态SQL的方式，通过这两种方式可以把参数传递到xml里面，在传递以后，执行操作之前，Mybatis会对这两种占位符进行动态的解析。</p></li><li><p>==#号占位符==等同于JBDC里面的 ? 占位符，它相同于向PreparedStatement里面的预处理语句设置参数，PreparedStatement里面的SQL语句是预编译的，SQL语句使用了占位符，规定了SQL语句的结构，并且在设置参数的时候如果有特殊字符会自动进行转义，所以#号占位符可以防止SQL注入。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">String sql = &quot;update Employees set age = ? where id = #&#123;id&#125;&quot;;</span><br><span class="line">//MyBatis在处理#&#123;&#125;时，会将SQL中的#&#123;&#125;替换为?号，使用PreparedStatement的set方法来赋值；</span><br><span class="line">String sql = &quot;update Employees set age = ? where id = ?&quot;;</span><br><span class="line">PreparedStatement stmt = con.prepareStatement(sql); //预编译语句</span><br><span class="line">stmt.setInt(1,18);//设置第一个参数的值为18</span><br><span class="line">stmt.setInt(2.100);//设置第二个参数的值为100</span><br></pre></td></tr></table></figure></li><li><p>使用 ==$号占位符==进行传参相当于相当于直接把参数拼接到了原始的SQL里面。Mybatis 不会对它进行任何的特殊处理。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">select id,name from $&#123;table&#125; where id = $&#123;id&#125;;</span><br><span class="line">//接受传递两个参数分别是 table 为 Product 和 id 为 1</span><br><span class="line">//就会得到下面的语句</span><br><span class="line">select id,name from Product where id = 1;</span><br><span class="line">//若这是传递的 id 为 1 or 1=1;</span><br><span class="line">//就会得到下面的语句</span><br><span class="line">select id,name from Product where id = 1 or 1 = 1 ;</span><br><span class="line">//上述语句会导致查出所有数据，发生SQL注入的问题。</span><br></pre></td></tr></table></figure><p>==总结==：</p></li><li><p>$ 号和 # 号占位符最大差别是前者是动态参数，后者是占位符，动态参数无法防止==SQL注入==的问题。所以在实际应用里面尽可能的去使用 # 号占位符，$号占位符的动态传参可以适合应用在一些动态SQL的场景里面，比如说动态传递表名或者动态设置排序字段等。</p><h5 id="什么是SQL注入"><a href="#什么是SQL注入" class="headerlink" title="什么是SQL注入"></a>什么是SQL注入</h5></li><li><p>原理：</p><ul><li>在Web应用程序中，有时需要用户输入数据来动态的构成SQL语句，如果用户输入的数据被构造成恶意的代码，而程序又没有细致地过滤和审查用户输入的数据，给程序带来严重的威胁，如：数据库信息泄漏，绕过登录验证进入系统后台等。</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> Mybatis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mybatis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>记录 -- 学术科技节续写比赛作品记录</title>
      <link href="/posts/xskjjxxbszp/"/>
      <url>/posts/xskjjxxbszp/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><ul><li>今天无意中翻到了自己在大学期间参加的学术科技节改编创作大赛<br>三等奖的奖状，不禁感慨(臭美)一下，在一众文科大佬的参赛作品中，我的文章脱颖而出(hhh),尽管只是三等奖但也是很可<br>以了。下面发一下参赛作品记录一下hhh，因为是改编创作，我选择了大家都熟悉的哆啦A梦进行结局的创作，文笔有限，还请见谅。</li></ul><h3 id="文章内容"><a href="#文章内容" class="headerlink" title="文章内容"></a>文章内容</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;“胖虎起床了，快要迟到了。”伴随着轻柔的声音，胖虎被推醒了。睁开眼睛，他便看到了熟悉的身影正站在他身边，神情紧张。“你是哆啦A梦吗？”胖虎不禁问道。“你在说什么胡话?我是你最好的朋友，哆啦A梦呐，快去学校了。”眼前这个圆乎乎的蓝胖子回应道。“你最好的朋友不是大雄？”胖虎疑惑道，“我们都一起住了这么久了，你是不是还没睡醒，快吃饭，出门。”说着，蓝胖子从口袋里把竹蜻蜓掏了出来。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;就这么一来二去地追问，胖虎拍拍脑袋，恍然大悟，现在哆啦A梦是他的好搭档了！胖虎激动地握住了哆啦A梦的双手。曾几何时，他一直羡慕着野比大雄有哆啦A梦，可以随时随地解决琐事烦恼，凭什么大雄就能拥有哆啦A梦，现在幸运儿成了自己，他终于可以随心所欲地做很多自己平时做不了的事了。想到这些，胖虎忍不住笑出来声来。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;“这个家伙真的奇怪，明明因为迟到罚站却还笑得出来。”一旁同样罚站的小夫对胖虎的痴笑表示不解。“好点了吗，小夫。”，迟到三人组之一的大雄理所应当也在这里聚首，他望着小夫头上的淤青，关切地问。“真多亏了你的祖传药膏，胖虎昨天那球真的够猛的，我当时被砸得头昏眼花的，现在好多了。”小夫感激涕零地说，“放学一起玩我新买的遥控飞机，可帅气了。”</p><p>&nbsp;&nbsp;&nbsp;&nbsp;放学后，小伙伴们围在一起看着小夫操控的飞机在半空中飞翔，发出阵阵喝彩。一旁的胖虎看到小夫如此威风，忙拉着旁边的哆啦A梦，索要道具，想要赶紧出出风头。蓝胖子摸索了一阵，掏出了名为万能方向盘的道具，只需将感应器贴在物品上就能用方向盘控制它飞起来移动。听完了哆啦A梦的介绍，胖虎迫不及待地将感应器贴在了自己的棒球棍上，用力旋转方向盘，棒球棍便腾空而起。“看看我，看看我。”见到被吸引而来的目光，胖虎兴奋地跳了起来，只见棒球棍逐渐加速，猛地撞到了小夫的飞机，飞机瞬间就坠落下来，摔成两半。“这飞机也没什么大不了的嘛，哈哈哈。”胖虎指着掉在地上的飞机大笑。小夫抱着坏掉的飞机，带着哭腔地说，“你赔我的飞机。”可胖虎却不以为然，他轻描淡写地说“是你的飞机太逊了。”说罢，玩着自己的方向盘扬长而去。看到这一幕，哆啦A梦和其他人一起无奈地摇头，大雄走到流着眼泪的小夫跟前，拍了拍小夫的肩膀，轻声说,“别伤心了，我帮你修修看吧。”“谢谢你，大雄。”小夫擦了擦眼泪，感动地说。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;“胖虎好坏啊，上次利用哆啦A梦的隐身道具作恶作剧，将我的书包藏了起来，可急死我了，还好大雄帮我找了一晚上才找到。”静香不满地向大家抱怨道。“是啊是啊，胖虎还...”小伙伴们围在一起述说着这些天来胖虎的种种恶行。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;有了哆啦A梦的道具后，胖虎的行为渐渐变本加厉了起来。“我想要最强的道具，能让大家都听我话的道具。”当他这么对哆啦A梦说的时候，哆啦A梦一脸震惊，他捂住自己的口袋，不愿意给出自己的道具，他知道将道具给现在的胖虎就是为虎作伥，可胖虎看出来了他的意思。迅速的一拳重重地敲在了哆啦A梦的脑袋上，眼冒金星之中，哆啦A梦知道胖虎要的道具已经得手了——恶魔护照。只需将它出示在人们面前，就可以强迫别人做自己想做的事。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;得到恶魔护照的胖虎更加为所欲为起来，他成为了人见人怕的”大魔头“。胖虎利用道具，抢走了大雄的漫画书，吃掉了静香刚买的冰淇淋，在考试的时候抄袭答案，在小夫扫好的地板上乱扔垃圾...胖虎的肆无忌惮，让伙伴们都苦不堪言，因此，大雄和哆啦A梦等人决定联合起来，勇敢地作出反击，这一举动得到了大家的全力支持。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;“胖虎睡着了。”前去放哨的小夫火急火燎地将情报告诉大雄。“事不宜迟，行动。”大雄一声令下，让哆啦A梦拿出任意门，小心翼翼地进入了胖虎的房间，偷偷地摸索一阵之后，终于不负众望，拿回了恶魔护照。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;“大雄小夫，去帮我买铜锣烧，我饿了，听见没有！”胖虎摸了摸口袋，对着大雄小夫等人命令道，摸索了一阵，无果。却是大雄拿出了恶魔护照，笑嘻嘻地说，“你在找这个？现在我们不用怕你了。”胖虎一下子慌了，他向着哆啦A梦喊道，“快给我更厉害的道具，让他们见识我的厉害。”可是这次哆啦A梦却站到了大雄的身边，他摇了摇头说，“胖虎，你太愚蠢了，事到如今，你还不知道自己做错了什么吗？你的粗暴蛮横让你失去了伙伴，只有温柔善良的人才能受到大家的欢迎。”说罢，大雄和哆啦A梦等小伙伴们聚在一起开心地玩耍，没有一个人愿意理会胖虎。胖虎一个人孤零零地站在原地，他彻彻底底地失去了一切，悔不当初，这一次他明白了他和大雄之间的差距。一张张充满厌恶神情的脸出现在他的面前，曾经熟悉的人群离他越来越远…</p><p>&nbsp;&nbsp;&nbsp;&nbsp;“不要啊！”胖虎从梦中惊醒，他抹去额头上的冷汗，“原来是个噩梦。”胖虎呆坐在原地，反复回想着这个有关他成为哆啦A梦最好的朋友的梦境，他决心做点什么…</p><p>&nbsp;&nbsp;&nbsp;&nbsp;“奇怪，哆啦A梦离开之后，胖虎好像变了一个人似的。”大雄不解地问小伙伴们。“是啊，现在他很有爱心，还主动借我文具。”静香不假思索地说。“这家伙终于不再那么野蛮了呢，上次还热心地帮我值日。”小夫也点了点头道。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;回到了22世纪的哆啦A梦通过机器看到了这一切，露出了欣慰的笑容，放置在他身旁的梦境制造仪器上还在播放着胖虎的梦境…</p><h3 id="故事背景"><a href="#故事背景" class="headerlink" title="故事背景"></a>故事背景</h3><ul><li>《哆啦A梦》叙述了一只来自22世纪的猫型机器人——哆啦A梦，受主人野比世修的托付，回到20世纪，借助从四维口袋里拿出来的各种未来道具，来帮助世修的高祖父——小学生野比大雄化解身边的种种困难问题，以及生活中和身边的小伙伴们发生的轻松幽默搞笑感人的故事。 </li><li>胖虎是大雄的同学，任性，蛮横，又贪婪。因为块头大，经常仗势欺人，总是把别人的东西占为己有，借给他的东西从来没还过。</li></ul><h3 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h3><ul><li>小哆啦的故事大家应该都很熟悉了吧，我写的这个故事获了奖，说明还是有人认可的，还是很开心的，希望看到的人都开心吧。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 记录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 作品 </tag>
            
            <tag> 作文 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java--业务场景：敏感词过滤代码实现（Fastjson配置全局序列化 @JSONField注解的serializeUsing属性）</title>
      <link href="/posts/jywcjmgcdmgl/"/>
      <url>/posts/jywcjmgcdmgl/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h4 id="业务场景"><a href="#业务场景" class="headerlink" title="业务场景"></a>业务场景</h4><ul><li>在系统数据库中，可能存在一些用户名称，昵称，评论中有些词汇，出于保护隐私或是不符合规范等原因，不能直接展示在前端页面上，这样的敏感词需要用 * 号代替。<h4 id="实现步骤"><a href="#实现步骤" class="headerlink" title="实现步骤"></a>实现步骤</h4></li></ul><ol><li>将系统需要替换的敏感词保存在数据库中，在项目启动后，获取敏感词库，保存到Redis缓存中。</li><li>编写敏感词序列化类 SensitiveWordSerializer 。</li><li>在需要敏感词过滤的实体类对应的字段上加上注解 @JSONField(serializeUsing = SensitiveWordSerializer.class)。</li><li>编写FastJson配置类 设置<code>fastjson</code>的全局序列化和反序列化的特性，使用<code>FastJsonHttpMessageConverter</code>替换spring boot默认实现(<code>MappingJackson2HttpMessageConverter</code>)作为<code>HttpMessageConverters</code>的首选实现。<h4 id="具体代码如下"><a href="#具体代码如下" class="headerlink" title="具体代码如下"></a>具体代码如下</h4><h5 id="需要的依赖坐标"><a href="#需要的依赖坐标" class="headerlink" title="需要的依赖坐标"></a>需要的依赖坐标</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--  fastjson 依赖  --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>fastjson<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--  redis 依赖  --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="创建敏感词数据库"><a href="#创建敏感词数据库" class="headerlink" title="创建敏感词数据库"></a>创建敏感词数据库</h5></li></ol><ul><li>建库语句  <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> IF <span class="keyword">EXISTS</span> `sys_sensitive_word`;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `sys_sensitive_word` (</span><br><span class="line">`id` <span class="type">varchar</span>(<span class="number">100</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;id&#x27;</span>,</span><br><span class="line">`name` <span class="type">varchar</span>(<span class="number">100</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;敏感词文本&#x27;</span>,</span><br><span class="line">`gmt_create` datetime <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">`gmt_modified` datetime <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line"><span class="keyword">PRIMARY</span> KEY (`id`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8mb4 <span class="keyword">COLLATE</span><span class="operator">=</span>utf8mb4_0900_ai_ci COMMENT<span class="operator">=</span><span class="string">&#x27;敏感词表&#x27;</span>;</span><br></pre></td></tr></table></figure></li><li>插入敏感词数据<br><img src="https://gcore.jsdelivr.net/gh/zhengmuxin/picb/7f6b3aa87ca249bdaa5632cf5433a82f.png" alt="在这里插入图片描述"></li><li>编写相关的敏感词实体类，service，mapper等代码 <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@TableName(&quot;sys_sensitive_word&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SensitiveWord</span> &#123;</span><br><span class="line">   <span class="meta">@TableId(value = &quot;id&quot;, type = IdType.ASSIGN_ID)</span></span><br><span class="line">   <span class="keyword">private</span> Integer id;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@TableField(&quot;name&quot;)</span></span><br><span class="line">   <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@ApiModelProperty(value = &quot;创建时间&quot;)</span></span><br><span class="line">   <span class="meta">@TableField(fill = FieldFill.INSERT)</span></span><br><span class="line">   <span class="keyword">private</span> Date gmtCreate;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@ApiModelProperty(value = &quot;更新时间&quot;)</span></span><br><span class="line">   <span class="meta">@TableField(fill = FieldFill.INSERT_UPDATE)</span></span><br><span class="line">   <span class="keyword">private</span> Date gmtModified;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h5 id="编写敏感词初始化类"><a href="#编写敏感词初始化类" class="headerlink" title="编写敏感词初始化类"></a>编写敏感词初始化类</h5></li><li>敏感词初始化类，负责读出数据库中的敏感词表，封装数据结构加载将redis中<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 敏感词库初始化并放入redis中</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SensitiveWordInit</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">SENSITIVE_WORD_KEY</span> <span class="operator">=</span> <span class="string">&quot;SENSITIVE_WORD_KEY&quot;</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 敏感词库</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> HashMap sensitiveWordMap;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> SensitiveWordService sensitiveWordService;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> RedisTemplate&lt;String, Object&gt; redisTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setRedisTemplate</span><span class="params">(RedisTemplate&lt;String, Object&gt; redisTemplate)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.redisTemplate = redisTemplate;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 初始化敏感词</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> Map&lt;String,Object&gt; <span class="title function_">initKeyWord</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            List&lt;SensitiveWord&gt; sensitiveWords = sensitiveWordService.selectAll();</span><br><span class="line">            <span class="comment">// 从敏感词集合对象中取出敏感词并封装到Set集合中</span></span><br><span class="line">            Set&lt;String&gt; keyWordSet = <span class="keyword">new</span> <span class="title class_">HashSet</span>();</span><br><span class="line">            <span class="keyword">for</span> (SensitiveWord s : sensitiveWords) &#123;</span><br><span class="line">                keyWordSet.add(s.getName().trim());</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 将敏感词库加入到HashMap中</span></span><br><span class="line">            addSensitiveWordToHashMap(keyWordSet);</span><br><span class="line">            <span class="type">RedisOperation</span> <span class="variable">redisOperation</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RedisOperation</span>(<span class="built_in">this</span>.redisTemplate);</span><br><span class="line">            redisOperation.set(SENSITIVE_WORD_KEY,sensitiveWordMap);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            log.error(<span class="string">&quot;初始化敏感词失败&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sensitiveWordMap;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Map <span class="title function_">getSensitiveWordFromRedis</span><span class="params">()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">RedisOperation</span> <span class="variable">redisOperation</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RedisOperation</span>(<span class="built_in">this</span>.redisTemplate);</span><br><span class="line">        <span class="type">Map</span> <span class="variable">map</span> <span class="operator">=</span> redisOperation.get(SENSITIVE_WORD_KEY);</span><br><span class="line">        <span class="keyword">return</span> map;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 封装敏感词库</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> keyWordSet</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">addSensitiveWordToHashMap</span><span class="params">(Set&lt;String&gt; keyWordSet)</span> &#123;</span><br><span class="line">        <span class="comment">// 初始化HashMap对象并控制容器的大小</span></span><br><span class="line">        sensitiveWordMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;String,Object&gt;(keyWordSet.size());</span><br><span class="line">        <span class="comment">// 敏感词</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">key</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="comment">// 用来按照相应的格式保存敏感词库数据</span></span><br><span class="line">        <span class="type">Map</span> <span class="variable">nowMap</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="comment">// 用来辅助构建敏感词库</span></span><br><span class="line">        Map&lt;String, String&gt; newWorMap ;</span><br><span class="line">        <span class="comment">// 使用一个迭代器来循环敏感词集合</span></span><br><span class="line">        Iterator&lt;String&gt; iterator = keyWordSet.iterator();</span><br><span class="line">        <span class="keyword">while</span> (iterator.hasNext()) &#123;</span><br><span class="line">            key = iterator.next();</span><br><span class="line">            <span class="comment">// 等于敏感词库，HashMap对象在内存中占用的是同一个地址，所以此nowMap对象的变化，sensitiveWordMap对象也会跟着改变</span></span><br><span class="line">            nowMap = sensitiveWordMap;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> MagicNum.ZERO; i &lt; key.length(); i++) &#123;</span><br><span class="line">                <span class="comment">// 截取敏感词当中的字，在敏感词库中字为HashMap对象的Key键值</span></span><br><span class="line">                <span class="type">char</span> <span class="variable">keyChar</span> <span class="operator">=</span> key.charAt(i);</span><br><span class="line">                <span class="comment">// 判断这个字是否存在于敏感词库中</span></span><br><span class="line">                <span class="type">Object</span> <span class="variable">wordMap</span> <span class="operator">=</span> nowMap.get(keyChar);</span><br><span class="line">                <span class="keyword">if</span> (wordMap != <span class="literal">null</span>) &#123;</span><br><span class="line">                    nowMap = (Map) wordMap;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    newWorMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">                    newWorMap.put(<span class="string">&quot;isEnd&quot;</span>, <span class="string">&quot;0&quot;</span>);</span><br><span class="line">                    nowMap.put(keyChar, newWorMap);</span><br><span class="line">                    nowMap = newWorMap;</span><br><span class="line">                <span class="comment">// 如果该字是当前敏感词的最后一个字，则标识为结尾字</span></span><br><span class="line">                <span class="keyword">if</span> (i == key.length() - MagicNum.ONE) &#123;</span><br><span class="line">                    nowMap.put(<span class="string">&quot;isEnd&quot;</span>, <span class="string">&quot;1&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;&#125;&#125;</span><br></pre></td></tr></table></figure></li><li>附上上面涉及到的RedisOperation工具类 <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br></pre></td><td class="code"><pre><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 主要把一些常用的redis操作使用redisTemplate包装为redis命令名的方式</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">RedisOperation</span> &#123;</span><br><span class="line">  </span><br><span class="line">       <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">UNCHECKED</span> <span class="operator">=</span> <span class="string">&quot;unchecked&quot;</span>;</span><br><span class="line">       <span class="keyword">private</span> RedisTemplate&lt;String, Object&gt; redisTemplate;</span><br><span class="line">       <span class="keyword">public</span> <span class="title function_">RedisOperation</span><span class="params">(RedisTemplate&lt;String, Object&gt; redisTemplate)</span> &#123;</span><br><span class="line">           <span class="built_in">this</span>.redisTemplate = redisTemplate;</span><br><span class="line">       &#125;</span><br><span class="line">  </span><br><span class="line">       <span class="comment">/**</span></span><br><span class="line"><span class="comment">        * 返回与键 key 相关联的值</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">       <span class="meta">@SuppressWarnings(UNCHECKED)</span></span><br><span class="line">       <span class="keyword">public</span> &lt;V&gt; V <span class="title function_">get</span><span class="params">(String key)</span> &#123;</span><br><span class="line">           <span class="keyword">return</span> (V) redisTemplate.opsForValue().get(key);</span><br><span class="line">       &#125;</span><br><span class="line">  </span><br><span class="line">      <span class="comment">/**</span></span><br><span class="line"><span class="comment">       * 删除key</span></span><br><span class="line"><span class="comment">       */</span></span><br><span class="line">       <span class="keyword">public</span> Boolean <span class="title function_">del</span><span class="params">(String key)</span> &#123;</span><br><span class="line">           <span class="keyword">return</span> redisTemplate.delete(key);</span><br><span class="line">       &#125;</span><br><span class="line">  </span><br><span class="line">      <span class="comment">/**</span></span><br><span class="line"><span class="comment">       * 批量删除</span></span><br><span class="line"><span class="comment">       */</span></span><br><span class="line">       <span class="keyword">public</span> Long <span class="title function_">del</span><span class="params">(Collection&lt;String&gt; keys)</span> &#123;</span><br><span class="line">           <span class="keyword">return</span> redisTemplate.delete(keys);</span><br><span class="line">       &#125;</span><br><span class="line">  </span><br><span class="line">      <span class="comment">/**</span></span><br><span class="line"><span class="comment">       * 返回给定的一个或多个字符串键的值</span></span><br><span class="line"><span class="comment">       */</span></span><br><span class="line">  </span><br><span class="line">       <span class="keyword">public</span> List&lt;Object&gt; <span class="title function_">mget</span><span class="params">(String... keys)</span> &#123;</span><br><span class="line">           <span class="keyword">return</span> redisTemplate.opsForValue().multiGet(Arrays.asList(keys));</span><br><span class="line">       &#125;</span><br><span class="line">  </span><br><span class="line">      <span class="comment">/**</span></span><br><span class="line"><span class="comment">       * 将value对象序列化后的字符串 关联到key&lt;br/&gt;</span></span><br><span class="line"><span class="comment">       * 如果key已经持有其他值，SET就覆写旧值，无视类型。</span></span><br><span class="line"><span class="comment">       */</span></span><br><span class="line">       <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">set</span><span class="params">(String key, Object value)</span> &#123;</span><br><span class="line">           redisTemplate.opsForValue().set(key, value);</span><br><span class="line">       &#125;</span><br><span class="line">  </span><br><span class="line">      <span class="comment">/**</span></span><br><span class="line"><span class="comment">       * 同时为多个键设置值&lt;br/&gt;</span></span><br><span class="line"><span class="comment">       * 如果某个给定键已经存在，那么MSET将使用新值去覆盖旧值</span></span><br><span class="line"><span class="comment">       */</span></span><br><span class="line">       <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">mset</span><span class="params">(Map&lt;String, Object&gt; map)</span> &#123;</span><br><span class="line">           redisTemplate.opsForValue().multiSet(map);</span><br><span class="line">       &#125;</span><br><span class="line">  </span><br><span class="line">      <span class="comment">/**</span></span><br><span class="line"><span class="comment">       * 同时为多个键设置值&lt;br/&gt;</span></span><br><span class="line"><span class="comment">       * 如果键key已经存在，则MSETNX命令不做任何动作</span></span><br><span class="line"><span class="comment">       */</span></span><br><span class="line">       <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">msetnx</span><span class="params">(Map&lt;String, Object&gt; map)</span> &#123;</span><br><span class="line">           redisTemplate.opsForValue().multiSetIfAbsent(map);</span><br><span class="line">       &#125;</span><br><span class="line">  </span><br><span class="line">      <span class="comment">/**</span></span><br><span class="line"><span class="comment">       * 将键key的值设置为value对象的序列化字符串，并将键key的生存时间设置为timeout&lt;br/&gt;</span></span><br><span class="line"><span class="comment">       * 如果键key已经存在，那么将覆盖已有的值</span></span><br><span class="line"><span class="comment">       */</span></span><br><span class="line">       <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setex</span><span class="params">(String key, Object value, <span class="type">long</span> timeout, TimeUnit unit)</span> &#123;</span><br><span class="line">           redisTemplate.opsForValue().set(key, value, timeout, unit);</span><br><span class="line">       &#125;</span><br><span class="line">  </span><br><span class="line">      <span class="comment">/**</span></span><br><span class="line"><span class="comment">       * 只在键key不存在的情况下， 将键key的值设置为value&lt;br/&gt;</span></span><br><span class="line"><span class="comment">       * 若键key已经存在，则SETNX命令不做任何动作</span></span><br><span class="line"><span class="comment">       */</span></span><br><span class="line">       <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setnx</span><span class="params">(String key, Object value)</span> &#123;</span><br><span class="line">           redisTemplate.opsForValue().setIfAbsent(key, value);</span><br><span class="line">       &#125;</span><br><span class="line">  </span><br><span class="line">      <span class="comment">/**</span></span><br><span class="line"><span class="comment">      * 只在键key不存在的情况下，将键key的值设置为value，且同时设置过期时间&lt;br/&gt;</span></span><br><span class="line"><span class="comment">      * 若键key已经存在，则SETNX命令不做任何动作。</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setnx</span><span class="params">(String key, Object value, <span class="type">long</span> timeout, TimeUnit unit)</span> &#123;</span><br><span class="line">           redisTemplate.opsForValue().setIfAbsent(key, value, timeout, unit);</span><br><span class="line">        &#125;</span><br><span class="line">  </span><br><span class="line">      <span class="comment">/**</span></span><br><span class="line"><span class="comment">      * 为键key储存的数字值加上一</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        <span class="keyword">public</span> Long <span class="title function_">incr</span><span class="params">(String key)</span> &#123;</span><br><span class="line">           <span class="keyword">return</span> incr(key, <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">  </span><br><span class="line">      <span class="comment">/**</span></span><br><span class="line"><span class="comment">      * 为键key储存的数字值加上增量increment</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        <span class="keyword">public</span> Long <span class="title function_">incr</span><span class="params">(String key, <span class="type">long</span> increment)</span> &#123;</span><br><span class="line">           <span class="keyword">return</span> redisTemplate.opsForValue().increment(key, increment);</span><br><span class="line">        &#125;</span><br><span class="line">  </span><br><span class="line">      <span class="comment">/**</span></span><br><span class="line"><span class="comment">      * 将键key储存的整数值减去减量decrement</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        <span class="keyword">public</span> Long <span class="title function_">decr</span><span class="params">(String key, <span class="type">long</span> decrement)</span> &#123;</span><br><span class="line">           <span class="keyword">return</span> redisTemplate.opsForValue().decrement(key, decrement);</span><br><span class="line">        &#125;</span><br><span class="line">  </span><br><span class="line">      <span class="comment">/**</span></span><br><span class="line"><span class="comment">      * 为键key储存的数字减一</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        <span class="keyword">public</span> Long <span class="title function_">decr</span><span class="params">(String key)</span> &#123;</span><br><span class="line">           <span class="keyword">return</span> decr(key, <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">  </span><br><span class="line">      <span class="comment">/**</span></span><br><span class="line"><span class="comment">      * HGET命令在默认情况下返回给定域的值&lt;br/&gt;</span></span><br><span class="line"><span class="comment">      * 如果给定域不存在于哈希表中，又或者给定的哈希表并不存在，那么命令返回 nil</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        <span class="meta">@SuppressWarnings(UNCHECKED)</span></span><br><span class="line">        <span class="keyword">public</span> &lt;V&gt; V <span class="title function_">hget</span><span class="params">(String key, String field)</span> &#123;</span><br><span class="line">           <span class="keyword">return</span> (V) redisTemplate.opsForHash().get(key, field);</span><br><span class="line">        &#125;</span><br><span class="line">  </span><br><span class="line">      <span class="comment">/**</span></span><br><span class="line"><span class="comment">      * 如果给定的域不存在于哈希表，那么返回一个nil值&lt;br/&gt;</span></span><br><span class="line"><span class="comment">      * 因为不存在的key被当作一个空哈希表来处理，所以对一个不存在的key进行HMGET操作将返回一个只带有 nil 值的表</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        <span class="keyword">public</span> List&lt;Object&gt; <span class="title function_">hmget</span><span class="params">(String key, String... fields)</span> &#123;</span><br><span class="line">           <span class="keyword">return</span> redisTemplate.opsForHash().multiGet(key, <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(Arrays.asList(fields)));</span><br><span class="line">        &#125;</span><br><span class="line">  </span><br><span class="line">      <span class="comment">/**</span></span><br><span class="line"><span class="comment">      * 返回哈希表 key 中，所有的域和值</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        <span class="keyword">public</span> Map&lt;Object, Object&gt; <span class="title function_">hgetAll</span><span class="params">(String key)</span> &#123;</span><br><span class="line">           <span class="keyword">return</span> redisTemplate.opsForHash().entries(key);</span><br><span class="line">        &#125;</span><br><span class="line">  </span><br><span class="line">      <span class="comment">/**</span></span><br><span class="line"><span class="comment">      * 如果给定的哈希表并不存在，那么一个新的哈希表将被创建并执行HSET操作&lt;br/&gt;</span></span><br><span class="line"><span class="comment">      * 如果域field已经存在于哈希表中， 那么它的旧值将被新值 value 覆盖。</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        <span class="keyword">public</span> &lt;V&gt; <span class="keyword">void</span> <span class="title function_">hset</span><span class="params">(String key, String field, V value)</span> &#123;</span><br><span class="line">           redisTemplate.opsForHash().put(key, field, value);</span><br><span class="line">        &#125;</span><br><span class="line">  </span><br><span class="line">      <span class="comment">/**</span></span><br><span class="line"><span class="comment">      * 同时将多个field-value(域-值)对设置到哈希表key中&lt;br/&gt;</span></span><br><span class="line"><span class="comment">      * 此命令会覆盖哈希表中已存在的域&lt;br/&gt;</span></span><br><span class="line"><span class="comment">      * 如果 key 不存在，一个空哈希表被创建并执行 HMSET 操作。</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">hmset</span><span class="params">(String key, Map&lt;String, ?&gt; data)</span> &#123;</span><br><span class="line">           redisTemplate.opsForHash().putAll(key, data);</span><br><span class="line">        &#125;</span><br><span class="line">  </span><br><span class="line">      <span class="comment">/**</span></span><br><span class="line"><span class="comment">      * 检查给定field是否存在于哈希表hash当中</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        <span class="keyword">public</span> Boolean <span class="title function_">hexists</span><span class="params">(String key, String field)</span> &#123;</span><br><span class="line">           <span class="keyword">return</span> redisTemplate.opsForHash().hasKey(key, field);</span><br><span class="line">        &#125;</span><br><span class="line">  </span><br><span class="line">      <span class="comment">/**</span></span><br><span class="line"><span class="comment">      * 删除哈希表 key 中的一个或多个指定域，不存在的域将被忽略</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        <span class="keyword">public</span> Long <span class="title function_">hdel</span><span class="params">(String key, Object... fields)</span> &#123;</span><br><span class="line">           <span class="keyword">return</span> redisTemplate.opsForHash().delete(key, fields);</span><br><span class="line">        &#125;</span><br><span class="line">  </span><br><span class="line">      <span class="comment">/**</span></span><br><span class="line"><span class="comment">      * 将一个或多个值 value 插入到列表 key 的表尾(最右边)&lt;br/&gt;</span></span><br><span class="line"><span class="comment">      * 如果 key 不存在，一个空列表会被创建并执行 LPUSH 操作&lt;br /&gt;</span></span><br><span class="line"><span class="comment">      * 当 key 存在但不是列表类型时，返回一个错误</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        <span class="keyword">public</span> Long <span class="title function_">rpush</span><span class="params">(String key, Object... values)</span> &#123;</span><br><span class="line">           <span class="keyword">return</span> redisTemplate.opsForList().rightPushAll(key, values);</span><br><span class="line">        &#125;</span><br><span class="line">  </span><br><span class="line">      <span class="comment">/**</span></span><br><span class="line"><span class="comment">       * 将一个或多个值 value 插入到列表 key 的表头&lt;br /&gt;</span></span><br><span class="line"><span class="comment">       * 如果 key 不存在，一个空列表会被创建并执行 LPUSH 操作&lt;br /&gt;</span></span><br><span class="line"><span class="comment">       * 当 key 存在但不是列表类型时，返回一个错误</span></span><br><span class="line"><span class="comment">       */</span></span><br><span class="line">        <span class="keyword">public</span> Long <span class="title function_">lpush</span><span class="params">(String key, Object... values)</span> &#123;</span><br><span class="line">           <span class="keyword">return</span> redisTemplate.opsForList().leftPushAll(key, values);</span><br><span class="line">        &#125;</span><br><span class="line">  </span><br><span class="line">      <span class="comment">/**</span></span><br><span class="line"><span class="comment">       * 移除并返回列表 key 的头元素</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        <span class="meta">@SuppressWarnings(UNCHECKED)</span></span><br><span class="line">        <span class="keyword">public</span> &lt;V&gt; V <span class="title function_">lpop</span><span class="params">(String key)</span> &#123;</span><br><span class="line">           <span class="keyword">return</span> (V) redisTemplate.opsForList().leftPop(key);</span><br><span class="line">        &#125;</span><br><span class="line">  </span><br><span class="line">      <span class="comment">/**</span></span><br><span class="line"><span class="comment">       * 移除并返回列表 key 的尾元素</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        <span class="meta">@SuppressWarnings(UNCHECKED)</span></span><br><span class="line">        <span class="keyword">public</span> &lt;V&gt; V <span class="title function_">rpop</span><span class="params">(String key)</span> &#123;</span><br><span class="line">           <span class="keyword">return</span> (V) redisTemplate.opsForList().rightPop(key);</span><br><span class="line">        &#125;</span><br><span class="line">  </span><br><span class="line">      <span class="comment">/**</span></span><br><span class="line"><span class="comment">       * 将一个或多个 member 元素加入到集合 key 当中，已经存在于集合的 member 元素将被忽略</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        <span class="meta">@SuppressWarnings(UNCHECKED)</span></span><br><span class="line">        <span class="keyword">public</span> &lt;V&gt; Long <span class="title function_">sadd</span><span class="params">(String key, V... members)</span> &#123;</span><br><span class="line">           <span class="keyword">return</span> redisTemplate.opsForSet().add(key, members);</span><br><span class="line">        &#125;</span><br><span class="line">  </span><br><span class="line">      <span class="comment">/**</span></span><br><span class="line"><span class="comment">      * 判断 member 元素是否集合 key 的成员</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        <span class="keyword">public</span> Boolean <span class="title function_">sismember</span><span class="params">(String key, Object member)</span> &#123;</span><br><span class="line">           <span class="keyword">return</span> redisTemplate.opsForSet().isMember(key, member);</span><br><span class="line">        &#125;</span><br><span class="line">  </span><br><span class="line">      <span class="comment">/**</span></span><br><span class="line"><span class="comment">      * 返回集合中的一个随机元素</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        <span class="meta">@SuppressWarnings(UNCHECKED)</span></span><br><span class="line">        <span class="keyword">public</span> &lt;V&gt; V <span class="title function_">srandmember</span><span class="params">(String key)</span> &#123;</span><br><span class="line">           <span class="keyword">return</span> (V) redisTemplate.opsForSet().randomMember(key);</span><br><span class="line">        &#125;</span><br><span class="line">  </span><br><span class="line">      <span class="comment">/**</span></span><br><span class="line"><span class="comment">      * 返回集合中的随机元素。&lt;p/&gt;</span></span><br><span class="line"><span class="comment">      * 如果 count 为正数，且小于集合基数，那么命令返回一个包含 count 个元素的数组，数组中的元素各不相同。如果 count 大于等于集合基数，那么返回整个集合。&lt;p/&gt;</span></span><br><span class="line"><span class="comment">      * 如果 count 为负数，那么命令返回一个数组，数组中的元素可能会重复出现多次，而数组的长度为 count 的绝对值。</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">  </span><br><span class="line">      <span class="keyword">public</span> List&lt;Object&gt; <span class="title function_">srandmembers</span><span class="params">(String key, <span class="type">long</span> count)</span> &#123;</span><br><span class="line">         <span class="keyword">return</span> redisTemplate.opsForSet().randomMembers(key, count);</span><br><span class="line">      &#125;</span><br><span class="line">  </span><br><span class="line">      <span class="comment">/**</span></span><br><span class="line"><span class="comment">      * 返回集合 key 中的所有成员。&lt;br /&gt;</span></span><br><span class="line"><span class="comment">      * 不存在的 key 被视为空集合</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        <span class="keyword">public</span> Set&lt;Object&gt; <span class="title function_">smembers</span><span class="params">(String key)</span> &#123;</span><br><span class="line">           <span class="keyword">return</span> redisTemplate.opsForSet().members(key);</span><br><span class="line">        &#125;</span><br><span class="line">  </span><br><span class="line">      <span class="comment">/**</span></span><br><span class="line"><span class="comment">      * 返回集合key的基数(集合中元素的数量)</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        <span class="keyword">public</span> Long <span class="title function_">scard</span><span class="params">(String key)</span> &#123;</span><br><span class="line">           <span class="keyword">return</span> redisTemplate.opsForSet().size(key);</span><br><span class="line">        &#125;</span><br><span class="line">  </span><br><span class="line">      <span class="comment">/**</span></span><br><span class="line"><span class="comment">      * 移除集合key中的一个或多个member元素，不存在的member元素会被忽略。&lt;br /&gt;</span></span><br><span class="line"><span class="comment">      * 当key不是集合类型，返回一个错误</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        <span class="keyword">public</span> Long <span class="title function_">srem</span><span class="params">(String key, Object... values)</span> &#123;</span><br><span class="line">           <span class="keyword">return</span> redisTemplate.opsForSet().remove(key, values);</span><br><span class="line">        &#125;</span><br><span class="line">  </span><br><span class="line">      <span class="comment">/**</span></span><br><span class="line"><span class="comment">      * 将一个元素及其score值加入到有序集key当中</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        <span class="keyword">public</span> &lt;V&gt; Boolean <span class="title function_">zadd</span><span class="params">(String key, V value, <span class="type">double</span> score)</span> &#123;</span><br><span class="line">           <span class="keyword">return</span> redisTemplate.opsForZSet().add(key, value, score);</span><br><span class="line">        &#125;</span><br><span class="line">  </span><br><span class="line">      <span class="comment">/**</span></span><br><span class="line"><span class="comment">       * 返回有序集key中，成员member的score值</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        <span class="keyword">public</span> Double <span class="title function_">zscore</span><span class="params">(String key, Object member)</span> &#123;</span><br><span class="line">           <span class="keyword">return</span> redisTemplate.opsForZSet().score(key, member);</span><br><span class="line">        &#125;</span><br><span class="line">  </span><br><span class="line">      <span class="comment">/**</span></span><br><span class="line"><span class="comment">       * 为有序集key的成员member的score值加上增量increment</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        <span class="keyword">public</span> Double <span class="title function_">zincrby</span><span class="params">(String key, Object member, <span class="type">double</span> increment)</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> redisTemplate.opsForZSet().incrementScore(key, member, increment);</span><br><span class="line">        &#125;</span><br><span class="line">  </span><br><span class="line">      <span class="comment">/**</span></span><br><span class="line"><span class="comment">       * 返回有序集key中，指定区间内的成员</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        <span class="keyword">public</span> Set&lt;Object&gt; <span class="title function_">zrange</span><span class="params">(String key, <span class="type">long</span> start, <span class="type">long</span> end)</span> &#123;</span><br><span class="line">           <span class="keyword">return</span> redisTemplate.opsForZSet().range(key, start, end);</span><br><span class="line">        &#125;</span><br><span class="line">  </span><br><span class="line">      <span class="comment">/**</span></span><br><span class="line"><span class="comment">       * 返回有序集key中，指定区间内的成员。且带有score</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        <span class="keyword">public</span> Set&lt;ZSetOperations.TypedTuple&lt;Object&gt;&gt; zrangewithscore(String key, <span class="type">long</span> start, <span class="type">long</span> end) &#123;</span><br><span class="line">           <span class="keyword">return</span> redisTemplate.opsForZSet().rangeWithScores(key, start, end);</span><br><span class="line">        &#125;</span><br><span class="line">  </span><br><span class="line">      <span class="comment">/**</span></span><br><span class="line"><span class="comment">       * 返回有序集key中，所有score值介于min和max之间(包括等于min或max)的成员。&lt;br /&gt;</span></span><br><span class="line"><span class="comment">       * 有序集成员按score值递增(从小到大)次序排列</span></span><br><span class="line"><span class="comment">       */</span></span><br><span class="line">        <span class="keyword">public</span> Set&lt;Object&gt; <span class="title function_">zrangebyscore</span><span class="params">(String key, <span class="type">double</span> min, <span class="type">double</span> max)</span> &#123;</span><br><span class="line">           <span class="keyword">return</span> redisTemplate.opsForZSet().rangeByScore(key, min, max);</span><br><span class="line">        &#125;</span><br><span class="line">  </span><br><span class="line">      <span class="comment">/**</span></span><br><span class="line"><span class="comment">       * 返回有序集key中，指定区间内的成员&lt;br /&gt;</span></span><br><span class="line"><span class="comment">       * 成员的位置按score值递减(从大到小)来排列</span></span><br><span class="line"><span class="comment">       */</span></span><br><span class="line">        <span class="keyword">public</span> Set&lt;Object&gt; <span class="title function_">zrevrange</span><span class="params">(String key, <span class="type">long</span> start, <span class="type">long</span> end)</span> &#123;</span><br><span class="line">           <span class="keyword">return</span> redisTemplate.opsForZSet().reverseRange(key, start, end);</span><br><span class="line">        &#125;</span><br><span class="line">  </span><br><span class="line">      <span class="comment">/**</span></span><br><span class="line"><span class="comment">       * 返回有序集key中，指定区间内的成员。且带有score</span></span><br><span class="line"><span class="comment">       */</span></span><br><span class="line">        <span class="keyword">public</span> Set&lt;ZSetOperations.TypedTuple&lt;Object&gt;&gt; zrevrangewithscores(String key, <span class="type">long</span> start, <span class="type">long</span> end) &#123;</span><br><span class="line">           <span class="keyword">return</span> redisTemplate.opsForZSet().reverseRangeWithScores(key, start, end);</span><br><span class="line">        &#125;</span><br><span class="line">  </span><br><span class="line">      <span class="comment">/**</span></span><br><span class="line"><span class="comment">       * 返回有序集key中，所有score值介于min和max之间(包括等于min或max)的成员。&lt;br /&gt;</span></span><br><span class="line"><span class="comment">       * 有序集成员按score值递增(从大到小)次序排列</span></span><br><span class="line"><span class="comment">       */</span></span><br><span class="line">        <span class="keyword">public</span> Set&lt;Object&gt; <span class="title function_">zrevrangebyscore</span><span class="params">(String key, <span class="type">double</span> min, <span class="type">double</span> max)</span> &#123;</span><br><span class="line">           <span class="keyword">return</span> redisTemplate.opsForZSet().reverseRangeByScore(key, min, max);</span><br><span class="line">        &#125;</span><br><span class="line">  </span><br><span class="line">      <span class="comment">/**</span></span><br><span class="line"><span class="comment">       * 移除有序集key中，所有score值介于min和max之间(包括等于min或max)的成员</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        <span class="keyword">public</span> Long <span class="title function_">zremrangebyscore</span><span class="params">(String key, <span class="type">double</span> min, <span class="type">double</span> max)</span> &#123;</span><br><span class="line">           <span class="keyword">return</span> redisTemplate.opsForZSet().removeRangeByScore(key, min, max);</span><br><span class="line">        &#125;</span><br><span class="line">  </span><br><span class="line">      <span class="comment">/**</span></span><br><span class="line"><span class="comment">       * 移除有序集key中，指定排名(rank)区间内的所有成员。</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        <span class="keyword">public</span> Long <span class="title function_">zremrangebyrank</span><span class="params">(String key, <span class="type">long</span> start, <span class="type">long</span> end)</span> &#123;</span><br><span class="line">           <span class="keyword">return</span> redisTemplate.opsForZSet().removeRange(key, start, end);</span><br><span class="line">        &#125;</span><br><span class="line">  </span><br><span class="line">      <span class="comment">/**</span></span><br><span class="line"><span class="comment">       * 移除有序集key中的一个或多个成员，不存在的成员将被忽略</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        <span class="keyword">public</span> Long <span class="title function_">zrem</span><span class="params">(String key, Object... values)</span> &#123;</span><br><span class="line">           <span class="keyword">return</span> redisTemplate.opsForZSet().remove(key, values);</span><br><span class="line">        &#125;</span><br><span class="line">  </span><br><span class="line">      <span class="comment">/**</span></span><br><span class="line"><span class="comment">       * 获取元素value在有序集合中的位置排名</span></span><br><span class="line"><span class="comment">       */</span></span><br><span class="line">        <span class="keyword">public</span> Long <span class="title function_">zrank</span><span class="params">(String key, Object value)</span> &#123;</span><br><span class="line">           <span class="keyword">return</span> redisTemplate.opsForZSet().reverseRank(key, value);</span><br><span class="line">        &#125;</span><br><span class="line">      <span class="comment">/**</span></span><br><span class="line"><span class="comment">       * 当key存在且是有序集类型时，返回有序集的基数。当key不存在时，返回0</span></span><br><span class="line"><span class="comment">       */</span></span><br><span class="line">        <span class="keyword">public</span> Long <span class="title function_">zcard</span><span class="params">(String key)</span> &#123;</span><br><span class="line">           <span class="keyword">return</span> redisTemplate.opsForZSet().size(key);</span><br><span class="line">        &#125;</span><br><span class="line">  </span><br><span class="line">      <span class="comment">/**</span></span><br><span class="line"><span class="comment">       * 返回有序集key中，score值在min和max之间(默认包括score值等于min或max)的成员的数量</span></span><br><span class="line"><span class="comment">       */</span></span><br><span class="line">        <span class="keyword">public</span> Long <span class="title function_">zcount</span><span class="params">(String key, <span class="type">double</span> min, <span class="type">double</span> max)</span> &#123;</span><br><span class="line">           <span class="keyword">return</span> redisTemplate.opsForZSet().count(key, min, max);</span><br><span class="line">        &#125;</span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">      <span class="comment">/**</span></span><br><span class="line"><span class="comment">       * 设置过期时间</span></span><br><span class="line"><span class="comment">       *</span></span><br><span class="line"><span class="comment">       * <span class="doctag">@param</span> timeout 过期时间，单位毫秒</span></span><br><span class="line"><span class="comment">       */</span></span><br><span class="line">      <span class="keyword">public</span> Boolean <span class="title function_">expire</span><span class="params">(String key, <span class="type">long</span> timeout)</span> &#123;</span><br><span class="line">          <span class="keyword">return</span> redisTemplate.expire(key, timeout, TimeUnit.MILLISECONDS);</span><br><span class="line">      &#125;</span><br><span class="line">  </span><br><span class="line">      <span class="comment">/**</span></span><br><span class="line"><span class="comment">       * 获取key的存活时长，单位毫秒</span></span><br><span class="line"><span class="comment">       */</span></span><br><span class="line">      <span class="keyword">public</span> Long <span class="title function_">ttl</span><span class="params">(String key)</span> &#123;</span><br><span class="line">          <span class="keyword">return</span> redisTemplate.getExpire(key, TimeUnit.MILLISECONDS);</span><br><span class="line">      &#125;</span><br><span class="line">  </span><br><span class="line">      <span class="comment">/**</span></span><br><span class="line"><span class="comment">       * 判断key是否存在</span></span><br><span class="line"><span class="comment">       */</span></span><br><span class="line">      <span class="keyword">public</span> Boolean <span class="title function_">exist</span><span class="params">(String key)</span> &#123;</span><br><span class="line">          <span class="keyword">return</span> redisTemplate.hasKey(key);</span><br><span class="line">      &#125;</span><br><span class="line">  </span><br><span class="line">      <span class="comment">/**</span></span><br><span class="line"><span class="comment">       * 获取底层redisTemplate</span></span><br><span class="line"><span class="comment">       */</span></span><br><span class="line">      <span class="keyword">public</span> RedisTemplate&lt;String, Object&gt; <span class="title function_">getRedisTemplate</span><span class="params">()</span> &#123;</span><br><span class="line">          <span class="keyword">return</span> redisTemplate;</span><br><span class="line">      &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="编写敏感词序列化类"><a href="#编写敏感词序列化类" class="headerlink" title="编写敏感词序列化类"></a>编写敏感词序列化类</h5></li><li>敏感词序列化类<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 敏感词过滤工具类</span></span><br><span class="line"><span class="comment">  * 使用方法    <span class="doctag">@JSONField</span>(serializeUsing = SensitiveWordSerializer.class)</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line">  <span class="meta">@Component</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SensitiveWordSerializer</span> <span class="keyword">implements</span> <span class="title class_">ObjectSerializer</span> &#123;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 敏感词库</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Map&lt;String,Object&gt; sensitiveWordMap = <span class="literal">null</span>;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> SensitiveWordInit wordInit;</span><br><span class="line">  </span><br><span class="line">  <span class="meta">@Autowired</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setRedisTemplate</span><span class="params">(SensitiveWordInit sensitiveWordInit)</span> &#123;</span><br><span class="line">  SensitiveWordSerializer.wordInit = sensitiveWordInit;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="meta">@PostConstruct</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">initSensitiveWord</span><span class="params">()</span> &#123;</span><br><span class="line">      sensitiveWordMap = SensitiveWordSerializer.wordInit.initKeyWord();</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 获取敏感词内容</span></span><br><span class="line"><span class="comment">   *</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> txt</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> matchType</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@return</span> 敏感词内容</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="keyword">public</span>  Set&lt;String&gt; <span class="title function_">getSensitiveWord</span><span class="params">(String txt, <span class="type">int</span> matchType)</span> &#123;</span><br><span class="line">      Set&lt;String&gt; sensitiveWordList = <span class="keyword">new</span> <span class="title class_">HashSet</span>();</span><br><span class="line">      <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> MagicNum.ZERO; i &lt; txt.length(); i++) &#123;</span><br><span class="line">          <span class="type">int</span> <span class="variable">length</span> <span class="operator">=</span> checkSensitiveWord(txt, i, matchType);</span><br><span class="line">          <span class="keyword">if</span> (length &gt; MagicNum.ZERO) &#123;</span><br><span class="line">              <span class="comment">// 将检测出的敏感词保存到集合中</span></span><br><span class="line">              sensitiveWordList.add(txt.substring(i, i + length));</span><br><span class="line">              i = i + length - MagicNum.ONE;</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> sensitiveWordList;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 替换敏感词</span></span><br><span class="line"><span class="comment">   *</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> txt</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> matchType</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> replaceChar</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="keyword">public</span>  String <span class="title function_">replaceSensitiveWord</span><span class="params">(String txt, <span class="type">int</span> matchType, String replaceChar)</span> &#123;</span><br><span class="line">      sensitiveWordMap = wordInit.getSensitiveWordFromRedis();</span><br><span class="line">      <span class="type">String</span> <span class="variable">resultTxt</span> <span class="operator">=</span> txt;</span><br><span class="line">      Set&lt;String&gt; set = getSensitiveWord(txt, matchType);</span><br><span class="line">      Iterator&lt;String&gt; iterator = set.iterator();</span><br><span class="line">      String word ;</span><br><span class="line">      String replaceString ;</span><br><span class="line">      <span class="keyword">while</span> (iterator.hasNext()) &#123;</span><br><span class="line">          word = iterator.next();</span><br><span class="line">          replaceString = getReplaceChars(replaceChar, word.length());</span><br><span class="line">          resultTxt = resultTxt.replaceAll(word, replaceString);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> resultTxt;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 替换敏感词内容</span></span><br><span class="line"><span class="comment">   *</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> replaceChar</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> length</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="keyword">private</span>  String <span class="title function_">getReplaceChars</span><span class="params">(String replaceChar, <span class="type">int</span> length)</span> &#123;</span><br><span class="line">      <span class="type">StringBuilder</span> <span class="variable">resultReplace</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>(replaceChar);</span><br><span class="line">      <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> MagicNum.ONE; i &lt; length; i++) &#123;</span><br><span class="line">          resultReplace.append(replaceChar);</span><br><span class="line">      &#125;</span><br><span class="line">  </span><br><span class="line">      <span class="keyword">return</span> resultReplace.toString();</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 检查敏感词数量</span></span><br><span class="line"><span class="comment">   *</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> txt</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> beginIndex</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> matchType</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="keyword">public</span>  <span class="type">int</span> <span class="title function_">checkSensitiveWord</span><span class="params">(String txt, <span class="type">int</span> beginIndex, <span class="type">int</span> matchType)</span> &#123;</span><br><span class="line">      <span class="type">boolean</span> <span class="variable">flag</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line">      <span class="comment">// 记录敏感词数量</span></span><br><span class="line">      <span class="type">int</span> <span class="variable">matchFlag</span> <span class="operator">=</span> MagicNum.ZERO;</span><br><span class="line">      String word ;</span><br><span class="line">      Map&lt;String,Object&gt; nowMap = sensitiveWordMap;</span><br><span class="line">      <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> beginIndex; i &lt; txt.length(); i++) &#123;</span><br><span class="line">          word = String.valueOf(txt.charAt(i));</span><br><span class="line">          <span class="comment">// 判断该字是否存在于敏感词库中</span></span><br><span class="line">          nowMap = (Map&lt;String,Object&gt;) nowMap.get(word);</span><br><span class="line">          <span class="keyword">if</span> (nowMap != <span class="literal">null</span>) &#123;</span><br><span class="line">              matchFlag++;</span><br><span class="line">              <span class="comment">// 判断是否是敏感词的结尾字，如果是结尾字则判断是否继续检测</span></span><br><span class="line">              <span class="keyword">if</span> (<span class="string">&quot;1&quot;</span>.equals(nowMap.get(<span class="string">&quot;isEnd&quot;</span>))) &#123;</span><br><span class="line">                  flag = <span class="literal">true</span>;</span><br><span class="line">                  <span class="comment">// 判断过滤类型，如果是小过滤则跳出循环，否则继续循环</span></span><br><span class="line">              &#125;</span><br><span class="line">          &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">              <span class="keyword">break</span>;</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (!flag) &#123;</span><br><span class="line">          matchFlag = <span class="number">0</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> matchFlag;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">write</span><span class="params">(JSONSerializer serializer, Object object, Object fieldName, Type fieldType, <span class="type">int</span> features)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">      <span class="type">String</span> <span class="variable">value</span> <span class="operator">=</span> replaceSensitiveWord((String) object, MagicNum.TWO, <span class="string">&quot;*&quot;</span>);</span><br><span class="line">      serializer.write(value);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="在需要敏感词过滤的实体上加上注解"><a href="#在需要敏感词过滤的实体上加上注解" class="headerlink" title="在需要敏感词过滤的实体上加上注解"></a>在需要敏感词过滤的实体上加上注解</h5></li><li>加上注解 @JSONField(serializeUsing = SensitiveWordSerializer.class)<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"> <span class="meta">@Data</span></span><br><span class="line"> <span class="meta">@EqualsAndHashCode(callSuper = false)</span></span><br><span class="line"> <span class="meta">@Accessors(chain = true)</span></span><br><span class="line"> <span class="meta">@TableName(&quot;sys_user&quot;)</span></span><br><span class="line"> <span class="meta">@ApiModel(description = &quot;用户实体类&quot;)</span></span><br><span class="line"> <span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserDTO</span>  &#123;</span><br><span class="line">  </span><br><span class="line">     <span class="meta">@TableId(value = &quot;id&quot;, type = IdType.ASSIGN_ID)</span></span><br><span class="line">     <span class="keyword">private</span> String id;</span><br><span class="line">     </span><br><span class="line">     <span class="meta">@TableField(value = &quot;username&quot;)</span></span><br><span class="line">     <span class="comment">// username需要敏感词过滤</span></span><br><span class="line">     <span class="meta">@JSONField(serializeUsing = SensitiveWordSerializer.class)</span></span><br><span class="line">     <span class="keyword">private</span> String username;</span><br><span class="line">     </span><br><span class="line">     <span class="comment">//......</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="Fastjson配置类"><a href="#Fastjson配置类" class="headerlink" title="Fastjson配置类"></a>Fastjson配置类</h5></li><li>设置<code>fastjson</code>的全局序列化和反序列化的特性，使用<code>FastJsonHttpMessageConverter</code>替换spring boot默认实现(<code>MappingJackson2HttpMessageConverter</code>)作为<code>HttpMessageConverters</code>首选实现<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Fastjson全局序列化配置</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">  <span class="meta">@Configuration</span></span><br><span class="line">  <span class="meta">@Slf4j</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FastJsonConfig</span> &#123;</span><br><span class="line">      <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Map&lt;SerializerFeature, String&gt; SERIALIZER_FEATURES = <span class="keyword">new</span> <span class="title class_">EnumMap</span>&lt;&gt;(SerializerFeature.class);</span><br><span class="line">      <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Map&lt;Feature, String&gt; PARSER_FEATURES = <span class="keyword">new</span> <span class="title class_">EnumMap</span>&lt;&gt;(Feature.class);</span><br><span class="line"></span><br><span class="line">      <span class="keyword">static</span> &#123;</span><br><span class="line">          SERIALIZER_FEATURES.put(SerializerFeature.WriteMapNullValue, <span class="string">&quot;WriteMapNullValue:输出值为null的字段&quot;</span>);</span><br><span class="line">          SERIALIZER_FEATURES.put(SerializerFeature.WriteDateUseDateFormat, <span class="string">&quot;WriteDateUseDateFormat:根据全局日期格式格式化&quot;</span>);</span><br><span class="line">          SERIALIZER_FEATURES.put(SerializerFeature.WriteBigDecimalAsPlain, <span class="string">&quot;WriteBigDecimalAsPlain:大数序列化为文本&quot;</span>);</span><br><span class="line">          SERIALIZER_FEATURES.put(SerializerFeature.DisableCircularReferenceDetect, <span class="string">&quot;DisableCircularReferenceDetect:关闭循环引用发现&quot;</span>);</span><br><span class="line">          PARSER_FEATURES.put(Feature.AllowISO8601DateFormat, <span class="string">&quot;AllowISO8601DateFormat:支持ISO8601格式的日期&quot;</span>);</span><br><span class="line">          PARSER_FEATURES.put(Feature.DisableCircularReferenceDetect, <span class="string">&quot;DisableCircularReferenceDetect:关闭循环引用发现&quot;</span>);</span><br><span class="line"></span><br><span class="line">          log.debug(<span class="string">&quot;全局启用Fastjson下列序列化选项&quot;</span>);</span><br><span class="line">          <span class="keyword">for</span> (Map.Entry&lt;SerializerFeature, String&gt; entry : SERIALIZER_FEATURES.entrySet()) &#123;</span><br><span class="line">              JSON.DEFAULT_GENERATE_FEATURE |= entry.getKey().getMask();</span><br><span class="line">              log.debug(entry.getValue());</span><br><span class="line">          &#125;</span><br><span class="line">          log.debug(<span class="string">&quot;全局启用Fastjson下列反序列化选项&quot;</span>);</span><br><span class="line">          <span class="keyword">for</span> (Map.Entry&lt;Feature, String&gt; entry : PARSER_FEATURES.entrySet()) &#123;</span><br><span class="line">              JSON.DEFAULT_PARSER_FEATURE |= entry.getKey().getMask();</span><br><span class="line">              log.debug(entry.getValue());</span><br><span class="line">          &#125;</span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Bean</span></span><br><span class="line">  <span class="keyword">public</span> HttpMessageConverters <span class="title function_">fastJsonHttpMessageConverters</span><span class="params">()</span> &#123;</span><br><span class="line">        log.debug(<span class="string">&quot;启用FastJsonHttpMessageConverter，将其添加至同类HttpMessageConverter之前&quot;</span>);</span><br><span class="line">         <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">HttpMessageConverters</span>(<span class="keyword">new</span> <span class="title class_">FastJsonHttpMessageConverter</span>());</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><h4 id="执行效果"><a href="#执行效果" class="headerlink" title="执行效果"></a>执行效果</h4></li><li>数据库中有一条用户数据，用户昵称为”笨蛋芝麻馅笨蛋“，”笨蛋“是我们的敏感词，启动项目，调用分页查询的接口，返回的用户昵称敏感词部分被*号代替：</li><li>数据库情况<br><img src="https://gcore.jsdelivr.net/gh/zhengmuxin/picb/4f52983628e44e608725205790b9c62f.png" alt="在这里插入图片描述"></li><li>调用接口查找用户信息结果,发现用户昵称中的敏感词成功被*号所代替。<br><img src="https://gcore.jsdelivr.net/gh/zhengmuxin/picb/0f2c6c0b41114068bf916d842345c38d.png" alt="在这里插入图片描述"></li></ul>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Spring </tag>
            
            <tag> 业务场景 </tag>
            
            <tag> FastJson </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java基础--static，final关键字作用与区别</title>
      <link href="/posts/jcjsfgjzzyyqb/"/>
      <url>/posts/jcjsfgjzzyyqb/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h4 id="final"><a href="#final" class="headerlink" title="final"></a>final</h4><h5 id="修饰类"><a href="#修饰类" class="headerlink" title="修饰类"></a>修饰类</h5><ul><li>修饰的类不可以被继承</li><li>常见的final修饰的类：<ul><li>字符串类：String StringBuilder StringBuffer</li><li>包装类：Byte Interger Double Short Long Float Character Boolean Void</li><li>数学工具类：Math StrictMath</li><li>系统类：System</li></ul></li><li>作用：final 修饰类的作用是为了保护封装，使其不可被继承，就不会有多态改变行为的可能。<h5 id="修饰方法"><a href="#修饰方法" class="headerlink" title="修饰方法"></a>修饰方法</h5></li><li>修饰的方法不可以被子类继承重写。<h5 id="修饰变量"><a href="#修饰变量" class="headerlink" title="修饰变量"></a>修饰变量</h5></li><li>修饰基本数据类型，则初始化后该变量的值不可以被修改。</li><li>修饰引用数据类型，则初始化后该引用不可变，但引用指向的对象内容可以改变。</li><li>修饰形参：参数在函数内部不可被修改，用于保证数据安全性，避免无意中改动数据带来的问题。<h4 id="static"><a href="#static" class="headerlink" title="static"></a>static</h4><h5 id="修饰代码块："><a href="#修饰代码块：" class="headerlink" title="修饰代码块："></a>修饰代码块：</h5></li><li>一般用于类的初始化，静态代码块在类的构造函数执行前执行</li><li>加载顺序：<br>==父类静态代码块—&gt;子类静态代码块—&gt;父类非静态代码块—&gt;父类构造方法—&gt;子类非静态代码块—&gt;子类构造方法==<h5 id="修饰方法-1"><a href="#修饰方法-1" class="headerlink" title="修饰方法"></a>修饰方法</h5></li><li>static修饰的方法叫做静态方法或者类方法。</li><li>static修饰的方法属于整个类，在类加载的时候就存在且可以被调用，通过类名.方法名()即可调用。</li><li>静态方法中不能访问类的非静态成员变量和非静态成员方法！</li><li>静态方法中不能有this与super关键字！</li><li>被static修饰的函数不可以用abstract修饰，必须实现。<h6 id="静态方法只能隐藏（hidden），不能重写（override）"><a href="#静态方法只能隐藏（hidden），不能重写（override）" class="headerlink" title="静态方法只能隐藏（hidden），不能重写（override）"></a>静态方法只能隐藏（hidden），不能重写（override）</h6></li><li>静态方法只能继承，不能重写。子类中可以定义与父类相同的静态方法，此时只是将父类中的方法隐藏，而不是覆盖它。</li><li>==<em>隐藏</em>==：父类和子类拥有相同名字的属性或者方法（ 方法隐藏只有一种形式，就是父类和子类存在相同的静态方法）时，父类的同名的属性或者方法形式上不见了，实际是还是存在的。<h5 id="修饰变量-1"><a href="#修饰变量-1" class="headerlink" title="修饰变量"></a>修饰变量</h5></li><li>static修饰的变量叫做静态变量或者类变量。</li><li>静态变量被所有该类的对象共享，静态变量随着类加载的时候直接分配内存，与实例对象无关。可以用类名直接访问，也可以通过对象访问（不推荐这种方式）。</li><li>由于共用内存区域的问题，所以在并发场景下直接使用静态变量会有安全问题，正确打开方式是：对修改静态变量的函数加锁。</li><li>static不能修饰局部变量。<h4 id="修饰常量"><a href="#修饰常量" class="headerlink" title="修饰常量"></a>修饰常量</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//使用static final关键字修饰常量</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">100</span>;  </span><br><span class="line"><span class="keyword">static</span> <span class="type">int</span> <span class="variable">b</span> <span class="operator">=</span> <span class="number">100</span>;</span><br><span class="line"><span class="keyword">final</span> <span class="type">int</span> <span class="variable">c</span> <span class="operator">=</span> <span class="number">100</span>;</span><br></pre></td></tr></table></figure></li><li>变量b没有final修饰，故可以被重新赋值，虽然c无法被重新赋值，但程序用完它且不会再用到它的时候就会被自动释放，不再占用内存。</li><li>a使用static final，故存放在静态空间，不会在程序运行时被释放，它永远占着内存直到程序终止，并且不能被修改，表示常量。</li></ul>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Java基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redis--Redis的过期策略和内存淘汰机制</title>
      <link href="/posts/rrdgqclhcnttjz/"/>
      <url>/posts/rrdgqclhcnttjz/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h4 id="Redis的过期策略"><a href="#Redis的过期策略" class="headerlink" title="Redis的过期策略"></a>Redis的过期策略</h4><p>==Redis的过期策略==是：定期删除+惰性删除</p><h5 id="定期删除"><a href="#定期删除" class="headerlink" title="定期删除"></a>定期删除</h5><ul><li><em>这里的定期删除是指Redis默认每隔100ms就随机抽取一些设置了过期时间的key。检查其是否过期，如果过期就删除</em>。</li><li>定期删除每次只是随机抽取一部分的key进行判断其是否过期而已。如果是全部取出来判断的话，假设Redis里放了10w个设置了过期时间的key，每隔几百毫秒，就检查全部10w个key，那cpu的负载会很高，都消耗在检查过期key上了，这将是一场性能的灾难。<h5 id="惰性删除"><a href="#惰性删除" class="headerlink" title="惰性删除"></a>惰性删除</h5></li><li>因为定期删除具有随机性，所以可能导致很多过期的key没能及时的清除掉。所以Redis同时采用了惰性删除的策略。</li><li>惰性删除是指，在获取某个key时，Redis会先检查一下，这个key如果设置了过期时间那么它是否已经过期，如果过期了就会被删除，不会返回任何结果。<h5 id="内存淘汰机制"><a href="#内存淘汰机制" class="headerlink" title="内存淘汰机制"></a>内存淘汰机制</h5></li><li>如果定期删除漏掉了很多过期key，而这些key又没被及时查询，不触发惰性删除，久而久之，大量过期key堆积在内存空间里，就会导致Redis的内存块耗尽。</li><li>这时Redis需要走内存淘汰机制。<h6 id="Redis的内存淘汰机制"><a href="#Redis的内存淘汰机制" class="headerlink" title="Redis的内存淘汰机制"></a>Redis的内存淘汰机制</h6>策略|含义<br>—|—<br>noeviction|==不进行内存淘汰的策略==。当内存不足以容纳新写入数据时，新写入操作会报错。<br>allkeys-lru（常用）|当内存不足以容纳新写入数据时，在键空间中，移除最近最少使用的 key。<br>allkeys-random|当内存不足以容纳新写入数据时，在键空间中，随机移除某个 key。<br>volatile-lru|当内存不足以容纳新写入数据时，在设置了过期时间的键空间中，移除最近最少使用的 key。<br>volatile-random|当内存不足以容纳新写入数据时，在设置了过期时间的键空间中，随机移除某个 key。<br>volatile-ttl|当内存不足以容纳新写入数据时，在设置了过期时间的键空间中，有更早过期时间的 key 优先移除。<h6 id="Redis设置内存淘汰机制的指令"><a href="#Redis设置内存淘汰机制的指令" class="headerlink" title="Redis设置内存淘汰机制的指令"></a>Redis设置内存淘汰机制的指令</h6></li></ul><ol><li>获取当前内存淘汰策略:config get maxmemory-policy<br><img src="https://gcore.jsdelivr.net/gh/zhengmuxin/picb/3fe3ced124694f9fbaa7f166cfd1fef1.png" alt=""><ul><li>Redis 默认采用 noeviction 策略，即不进行内存淘汰的策略。</li></ul></li><li>获取Redis能使用的最大内存大小:config get maxmemory<br><img src="https://gcore.jsdelivr.net/gh/zhengmuxin/picb/ef3b0fa09fa94f54b6c57afc3ece3f30.png" alt=""><ul><li>如果不设置最大内存大小或者设置最大内存大小为 0，在64位操作系统下不限制内存大小，而在32位操作系统下最多使用3GB内存(32 位的机器最大只支持 4GB 的内存，而系统本身就需要一定的内存资源来支持运行，所以 32 位机器限制最大 3 GB 的可用内存)。</li></ul></li><li><p>设置内存淘汰策略：config set maxmemory-policy allkeys-lru<br><img src="https://gcore.jsdelivr.net/gh/zhengmuxin/picb/43ca8b4f180d4d439954256ff06b375e.png" alt=""></p><ul><li>返回 OK ，设置成功。当然也可以通过修改Redis的配置文件 redis.conf来设置：<br><code>maxmemory-policy allkeys-lru</code></li></ul></li><li><p>设置Redis最大占用内存大小:config maxmemory 100mb 设置内存大小为100mb<br><img src="https://gcore.jsdelivr.net/gh/zhengmuxin/picb/8a1c8807e6ce457d864457dc0f7f0671.png" alt=""></p></li></ol><h6 id="简单手写LRU算法"><a href="#简单手写LRU算法" class="headerlink" title="简单手写LRU算法"></a>简单手写LRU算法</h6><p>淘汰算法：最近最少使用算法<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">LRUCache</span>&lt;K, V&gt; <span class="keyword">extends</span> <span class="title class_">LinkedHashMap</span>&lt;K, V&gt; &#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="type">int</span> CACHE_SIZE;  <span class="comment">//缓存的大小，最多能存储的数据</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">LRUCache</span><span class="params">(<span class="type">int</span> cacheSize)</span> &#123;</span><br><span class="line"><span class="comment">// true 表示让 linkedHashMap 按照访问顺序来进行排序，最近访问的放在头部，最</span></span><br><span class="line"><span class="built_in">super</span>((<span class="type">int</span>) Math.ceil(cacheSize / <span class="number">0.75</span>) + <span class="number">1</span>, <span class="number">0.75f</span>, <span class="literal">true</span>);</span><br><span class="line">CACHE_SIZE = cacheSize;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 钩子方法，通过put新增键值对的时候，若该方法返回true</span></span><br><span class="line"><span class="comment">* 便移除该map中最老的键和值</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">protected</span> <span class="type">boolean</span> <span class="title function_">removeEldestEntry</span><span class="params">(Map.Entry&lt;K, V&gt; eldest)</span> &#123;</span><br><span class="line"><span class="comment">// 当 map中的数据量大于指定的缓存个数的时候，就自动删除最老的数据。</span></span><br><span class="line"><span class="keyword">return</span> size() &gt; CACHE_SIZE;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> Redis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java框架--SpringMVC（工作原理，常用注解）的学习笔记</title>
      <link href="/posts/jsgzylcyzjdxxbj/"/>
      <url>/posts/jsgzylcyzjdxxbj/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h4 id="SpringMVC"><a href="#SpringMVC" class="headerlink" title="SpringMVC"></a>SpringMVC</h4><h5 id="什么是SpringMVC？"><a href="#什么是SpringMVC？" class="headerlink" title="什么是SpringMVC？"></a>什么是SpringMVC？</h5><ul><li>Spring MVC是一个基于Java的实现了MVC设计模式的请求驱动类型的轻量级Web框架，通过把模型-视图-控制器分离，将web层进行职责解耦，把复杂的web应用分成逻辑清晰的几部分，简化开发，减少出错，方便组内开发人员之间的配合。<h5 id="SpringMVC的优点"><a href="#SpringMVC的优点" class="headerlink" title="SpringMVC的优点"></a>SpringMVC的优点</h5></li></ul><ol><li>是Spring框架的一部分，可以方便的利用Spring所提供的其他功能（如IOC容器，AOP等）。</li><li>灵活性强，易于与其他框架集成。</li><li>提供了一个前端控制器DispatcherServlet，使开发人员无需额外开发控制器对象。</li><li>可自动绑定用户输入，并能正确的转换数据类型。</li><li>内置了常见的校验器，可以校验用户输入。如果校验不能通过，那么就会重定向到输入表单。</li><li>支持国际化。可以根据用户区域显示多国语言。</li><li>支持多种视图技术。它支持JSP、Velocity和FreeMarker等视图技术。</li><li>使用基于XML的配置文件，在编辑后，不需要重新编译应用程序。<h5 id="SpringMVC的原理图"><a href="#SpringMVC的原理图" class="headerlink" title="SpringMVC的原理图"></a>SpringMVC的原理图</h5><img src="https://gcore.jsdelivr.net/gh/zhengmuxin/picb/154546a520284d4da347df495e82969e.png" alt=""><h5 id="SpringMVC接口解释"><a href="#SpringMVC接口解释" class="headerlink" title="SpringMVC接口解释"></a>SpringMVC接口解释</h5></li></ol><ul><li><strong>DispatcherServlet接口</strong>：<br>Spring提供的前端控制器，所有的请求都有经过它来统一分发。在DispatcherServlet将请求分发给Spring Controller之前，需要借助于Spring提供的HandlerMapping定位到具体的Controller。</li><li><strong>HandlerMapping接口</strong>：<br>能够完成客户请求到Controller映射。</li><li><strong>Controller接口</strong>：<br>需要为并发用户处理上述请求，因此实现Controller接口时，必须保证线程安全并且可重用。Controller将处理用户请求，这和Struts Action扮演的角色是一致的。一旦Controller处理完用户请求，则返回ModelAndView对象给DispatcherServlet前端控制器，ModelAndView中包含了模型（Model）和视图（View）。<ul><li>从宏观角度考虑，DispatcherServlet是整个Web应用的控制器；</li><li>从微观角度考虑，Controller是单个Http请求处理过程中的控制器，而ModelAndView是Http请求过程中返回的模型（Model）和视图（View）。</li></ul></li><li><strong>ViewResolver接口</strong>：<br>Spring提供的视图解析器（ViewResolver）在Web应用中查找View对象，从而将相应结果渲染给客户。<h5 id="SpringMVC运行原理"><a href="#SpringMVC运行原理" class="headerlink" title="SpringMVC运行原理"></a>SpringMVC运行原理</h5></li></ul><ol><li>用户发送请求到前端控制器DispatcherServlet。</li><li>DispatcherServlet收到请求调用HandlerMapping处理器映射器。</li><li>处理器映射器找到具体的处理器（可以根据xml配置，注解进行查找），生成处理器对象以及处理器拦截器（如果有则生成）一并返回给DispatcherServlet。</li><li>DispatcherServlet调用处理器适配器HandlerAdapter。</li><li>HandlerAdapter经过适配调用具体的处理器（Controller，后端控制器）。</li><li>Controller执行完成返回ModelAndView。</li><li>HandlerAdapter将controller返回的ModelAndView返回给DispatcherServlet。</li><li>DispatcherServlet将ModelAndView传送给ViewResolver视图解析器。</li><li>VIewResolver解析后返回具体的View。</li><li>DispatcherServlet根据View渲染视图（即将模型数据填充至视图中）。</li><li>DispatcherServlet响应用户。<h5 id="SpringMVC常用注解"><a href="#SpringMVC常用注解" class="headerlink" title="SpringMVC常用注解"></a>SpringMVC常用注解</h5><img src="https://gcore.jsdelivr.net/gh/zhengmuxin/picb/bc0baa346aa041ab9519d999d9eb37e7.png" alt=""></li></ol><ul><li><em>@Controller</em><ul><li>用于标注控制层组件，被标记的类就是一个SpringMVC Controller对象;</li><li>分发处理器会扫描使用了该注解的类的方法，并检测该方法是否使用了@RequestMapping注解;</li><li>可以把Request请求header部分绑定到方法的参数上。</li></ul></li><li><em>@RestController</em><ul><li>相当于@Controller与@ResponseBody的组合效果</li></ul></li><li><em>@Respository</em><ul><li>用于标注dao层，在daoImpl类上面注解</li></ul></li><li><em>@Service</em><ul><li>用于标注业务层组件</li></ul></li><li><em>@Component</em><ul><li>泛指组件，当组件不好归类时，可用此注解标注</li></ul></li><li><em>@ResponseBody</em><ul><li>异步请求</li><li>该注解用于将Controller的方法返回的对象，通过恰当的HttpMessageConverter转换为指定格式后，写入Response对象的Body数据区。</li><li>返回的数据不是Html标签的页面，而是其他某种格式的数据时（json，xml等）使用</li></ul></li><li><em>@RequestMapping</em><ul><li>用来处理请求地址映射的注解，可用于类或者方法上。用于类上，表示类中所有响应请求的方法都是以该地址作为父路径。</li></ul></li><li><em>@PathVariable</em><ul><li>用于将请求URL中的模板变量映射到功能处理方法的参数上，即取出url模板中的变量作为参数。</li></ul></li><li><em>@RequestsParam</em><ul><li>用于在SpringMVC后台控制层获取参数，类似一种时request.getParamter(“name”)</li></ul></li><li><em>@RequestHeader</em><ul><li>可以把request请求header部分绑定到方法的参数上<h5 id="SpringMVC执行流程"><a href="#SpringMVC执行流程" class="headerlink" title="SpringMVC执行流程"></a>SpringMVC执行流程</h5><h6 id="1-配置阶段"><a href="#1-配置阶段" class="headerlink" title="1.配置阶段"></a>1.配置阶段</h6></li></ul></li><li>配置阶段，主要是完成对 xml配置和注解配置。</li><li>具体步骤如下：<ol><li>首先，从 web.xml 开始，配置 DispatcherServlet 的url 匹配规则和Spring 主配置文件的加载路径。</li><li>然后，就是配置注解，比如@Controller、@Service、@Autowrited 以及@RequestMapping 等。<h6 id="2-初始化阶段"><a href="#2-初始化阶段" class="headerlink" title="2.初始化阶段"></a>2.初始化阶段</h6></li></ol></li><li>初始化阶段，主要是加载并解析配置信息以及 IoC 容器、DI 操作和 HandlerMapping 的初始化。</li><li>具体步骤如下：<ol><li>首先，Web 容器启动以后，会由 Web 容器自动调用DispatcherServlet 的 init()方法。然后，在 init()方法中，会初始化 IoC 容器（Map），紧接着，根据配置好的扫描包路径，扫描出相关的类，并利用反射进行实例化，存放到 IoC 容器中。</li><li>缓存之后，Spring 将再次迭代扫描 IoC 容器中的实例，给需要自动赋值的属性（加了 @Autowired注解 ）自动赋值。</li><li>最后，读取 @RequestMapping 注解，获得请求 url，将 url 和 Method 建议一对一的映射关系并缓存起来。可以简单粗暴地理解为缓存在一个 Map 中，它的 Key 就是url，它的值是 Method。<h6 id="3-运行阶段"><a href="#3-运行阶段" class="headerlink" title="3.运行阶段"></a>3.运行阶段</h6></li></ol></li><li>运行阶段，在 Spring 启动以后，等待用户请求，完成内<br>部调度并返回响应结果。</li><li>具体步骤如下：<ol><li>用户在浏览器输入 url 之后，Web 容器会接收到用户请求。Web 容器会自动调用 doGet()或者 doPost()方法。从doGet()或者 doPost()方法中，我们可以获得两个对象，分别是 request 和 response。通过 request 可以获得用户请求带过来的信息，通过 response 可以往浏览器端输出响应结果。</li><li>然后，根据 request 中获得的请求 url，可以从HandlerMapping 中找到对应 Method。</li><li>接着，还是利用反射调用方法，将获得方法调用的返回结果。</li><li>最后，将返回结果通过 response 输出到浏览器，用户就可以看到响应结果。<h5 id="一些问题"><a href="#一些问题" class="headerlink" title="一些问题"></a>一些问题</h5><h6 id="Spring-MVC的控制器是不是单例模式-如果是-有什么问题-怎么解决？"><a href="#Spring-MVC的控制器是不是单例模式-如果是-有什么问题-怎么解决？" class="headerlink" title="Spring MVC的控制器是不是单例模式,如果是,有什么问题,怎么解决？"></a>Spring MVC的控制器是不是单例模式,如果是,有什么问题,怎么解决？</h6></li></ol></li><li>答：是单例模式,所以在多线程访问的时候有线程安全问题,不要用同步,会影响性能的,解决方案是在控制器里面不能写字段。<h6 id="Spring-MVC怎么样设定重定向和转发的？"><a href="#Spring-MVC怎么样设定重定向和转发的？" class="headerlink" title="Spring MVC怎么样设定重定向和转发的？"></a>Spring MVC怎么样设定重定向和转发的？</h6></li><li>答：<ul><li>转发：在返回值前面加”forward:”，如”forward:user.do？name=method4”；</li><li>重定向：在返回值前面加”redirect:”，如”redirect:<a href="http://www.baidu.com&quot;。">http://www.baidu.com&quot;。</a><h6 id="Spring-MVC怎么和AJAX相互调用的？"><a href="#Spring-MVC怎么和AJAX相互调用的？" class="headerlink" title="Spring MVC怎么和AJAX相互调用的？"></a>Spring MVC怎么和AJAX相互调用的？</h6></li></ul></li><li>答：通过Jackson框架就可以把Java里面的对象直接转化成Js可以识别的Json对象。<br>具体步骤如下 ：<ol><li>加入Jackson.jar</li><li>在配置文件中配置json的映射</li><li>在接受Ajax方法里面可以直接返回Object,List等,但方法前面要加上@ResponseBody注解。<h6 id="Spring-MVC中函数的返回值是什么？"><a href="#Spring-MVC中函数的返回值是什么？" class="headerlink" title="Spring MVC中函数的返回值是什么？"></a>Spring MVC中函数的返回值是什么？</h6></li></ol></li><li>答：返回值可以有很多类型,有String, ModelAndView。ModelAndView类把视图和数据都合并的一起的，但一般用String比较好。</li></ul>]]></content>
      
      
      <categories>
          
          <category> Spring </category>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Spring </tag>
            
            <tag> Spring MVC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>GraphQL -- GraphQL入门，与SpringBoot整合，并用Postman测试接口</title>
      <link href="/posts/grmyszhbypcsjk/"/>
      <url>/posts/grmyszhbypcsjk/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="什么是GraphQL"><a href="#什么是GraphQL" class="headerlink" title="什么是GraphQL"></a>什么是GraphQL</h3><h4 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h4><p>GraphQL是一种用于 API 的查询语言，也是一个基于服务端的运行引擎。GraphQL 提供了一套完整的规范和描述用于查询 API，服务端能够根据客户端的需要自动适配并返回准确的数据。</p><h4 id="优势"><a href="#优势" class="headerlink" title="优势"></a>优势</h4><ul><li>在目前流行的restful架构下，服务端返回的接口数据大多由后端开发所定义，而不是由前端来提出，比如对于同一个用户信息，有时后端接口返回来的数据中，仅有部分是前端所需要的，这是其他返回的数据便是冗余的。如果为了解决冗余的问题，编写对应返回数据的接口，又会使得接口数量变得庞大臃肿。</li><li>而使用GraphQL可以使开发者可以自定义数据模型、查询规范和查询参数，并在一个请求中指定需要返回的数据以准确获取所有想要的数据。</li></ul><h3 id="spring-boot整合GraphQL"><a href="#spring-boot整合GraphQL" class="headerlink" title="spring boot整合GraphQL"></a>spring boot整合GraphQL</h3><h4 id="下面创建一个简单的spring-boot项目整合GraphQL，做简单的演示"><a href="#下面创建一个简单的spring-boot项目整合GraphQL，做简单的演示" class="headerlink" title="下面创建一个简单的spring boot项目整合GraphQL，做简单的演示"></a>下面创建一个简单的spring boot项目整合GraphQL，做简单的演示</h4><ol><li>创建一个mavan项目</li><li>在pom文件中导入GraphQL的依赖， <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--graphql-spring-boot--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-graphql<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.graphql-java<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>graphiql-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.0.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- spring-boot web服务的依赖 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li>在application.yaml文件中添加GraphQL相关的配置<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">server:</span><br><span class="line">port: 8889</span><br><span class="line">spring:</span><br><span class="line">graphql:</span><br><span class="line">graphiql:</span><br><span class="line">enabled: true</span><br><span class="line">path: /graphql</span><br><span class="line">schema:</span><br><span class="line">locations: classpath:graphql/</span><br></pre></td></tr></table></figure></li><li><p>接口代码编写</p><ul><li>TestController</li><li><p>此处有两个注解，@QueryMapping，@MutationMapping分别对应graphQL所支持的数据操作query(查询：支持对数据的基本查询)与mutation(变更：支持对数据的增删改操作)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestController</span> &#123;</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 经典 hollo graphql</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="meta">@QueryMapping</span></span><br><span class="line">  <span class="keyword">public</span> String <span class="title function_">hello</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;hello graphql&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 查询学生列表</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="meta">@QueryMapping</span></span><br><span class="line">  <span class="keyword">public</span> List&lt;Student&gt; <span class="title function_">getStudent</span><span class="params">(<span class="meta">@Argument(&quot;flag&quot;)</span> String flag)</span>&#123;</span><br><span class="line">    <span class="comment">//此处的业务操作就不写了，直接返回Student对象集合</span></span><br><span class="line">    ArrayList&lt;Student&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    list.add(<span class="keyword">new</span> <span class="title class_">Student</span>(<span class="number">1</span>,<span class="string">&quot;zmx&quot;</span>));</span><br><span class="line">    list.add(<span class="keyword">new</span> <span class="title class_">Student</span>(<span class="number">2</span>,<span class="string">&quot;cyn&quot;</span>));</span><br><span class="line">    <span class="keyword">return</span> list;</span><br><span class="line">  &#125; </span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 修改学生信息</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> Student</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="meta">@MutationMapping</span></span><br><span class="line">  <span class="keyword">public</span> String <span class="title function_">updateStudent</span><span class="params">(<span class="meta">@Argument</span> StudentDTO Student)</span>&#123;<span class="comment">//@Argument 注解可以指定参数名</span></span><br><span class="line">    <span class="comment">//执行修改逻辑，这里就不写了</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;success!&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></li><li><p>Student实体类与StudentDTO实体类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"> <span class="meta">@Data</span></span><br><span class="line"> <span class="meta">@AllArgsConstructor</span></span><br><span class="line"> <span class="meta">@NoArgsConstructor</span></span><br><span class="line"> <span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> &#123;</span><br><span class="line">   <span class="keyword">private</span> <span class="type">int</span> id;</span><br><span class="line">   <span class="keyword">private</span> String name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StudentDTO</span> &#123;</span><br><span class="line">   <span class="keyword">private</span> <span class="type">int</span> id;</span><br><span class="line">   <span class="keyword">private</span> String name;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>启动类<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"> <span class="meta">@ComponentScan(&quot;org.example.graphql&quot;)</span></span><br><span class="line"> <span class="meta">@SpringBootApplication()</span></span><br><span class="line"> <span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PartApplication</span> &#123;</span><br><span class="line"> <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="comment">//如果启动类启动失败，可以输出异常信息，查看原因</span></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">       SpringApplication.run(PartApplication.class, args);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">       System.out.println(e.toString());</span><br><span class="line">    &#125;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 注入WebGraphQlInterceptor Bean</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line">  <span class="meta">@Bean</span></span><br><span class="line">  <span class="keyword">public</span> WebGraphQlInterceptor <span class="title function_">interceptor</span><span class="params">()</span> &#123;</span><br><span class="line">     <span class="keyword">return</span> (webInput, interceptorChain) -&gt;</span><br><span class="line">         <span class="comment">// Switch threads to prove ThreadLocal context propagation works</span></span><br><span class="line">         interceptorChain</span><br><span class="line">                 .next(webInput)</span><br><span class="line">                 .timeout(Duration.ofMinutes(<span class="number">5</span>),</span><br><span class="line">                         Mono.error(<span class="keyword">new</span> <span class="title class_">ResponseStatusException</span>(HttpStatus.SERVICE_UNAVAILABLE)));</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>在resource文件夹下创建graphql文件夹(与配置文件中的schma-locations对应)，在其中编写.graphqls文件</p><ul><li>编写.graphqls文件前，我们可以在使用idea安装一个GraphQL插件<br><img src="https://gcore.jsdelivr.net/gh/zhengmuxin/picb/6e727855903a456e8db1d510bb5e2d84.png" alt=""></li><li>安装后新建文件时，便可以选择.graphqls文件<br><img src="https://gcore.jsdelivr.net/gh/zhengmuxin/picb/c09270a9a4234d45912cc3cc84679c55.png" alt=""></li><li>在idea下方工具栏也会出现GraphQL栏，可以检查我们书写的GraphQL语法是否正确<br><img src="https://gcore.jsdelivr.net/gh/zhengmuxin/picb/2e7485a11be44b26ad8d088aef8bbad3.png" alt=""></li><li>好了，回归正题，我们来编写.graphqls文件，使用到的schema语法可以参考链接： <a href="https://graphql.org/learn/schema">GraphQL官网</a> ，根据Controller层的接口，写出的代码如下<ul><li>代码目录<br><img src="https://gcore.jsdelivr.net/gh/zhengmuxin/picb/17f9d7be8cd848698b6324d02563eddb.png" alt=""></li><li>root.graphqls的内容<figure class="highlight graphql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">schema</span> <span class="punctuation">&#123;</span></span><br><span class="line">  <span class="symbol">query</span><span class="punctuation">:</span> <span class="keyword">Query</span></span><br><span class="line">  <span class="symbol">mutation</span><span class="punctuation">:</span> <span class="keyword">Mutation</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"><span class="keyword">type</span> <span class="keyword">Mutation</span><span class="punctuation">&#123;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"><span class="keyword">type</span> <span class="keyword">Query</span><span class="punctuation">&#123;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure></li><li>test.graphqls的内容<figure class="highlight graphql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">extend <span class="keyword">type</span> <span class="keyword">Query</span><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="symbol">hello</span><span class="punctuation">:</span>String</span><br><span class="line">  getStudent<span class="punctuation">(</span><span class="symbol">flag</span><span class="punctuation">:</span>String<span class="punctuation">)</span><span class="punctuation">:</span><span class="punctuation">[</span>Student<span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line">extend <span class="keyword">type</span> <span class="keyword">Mutation</span> <span class="punctuation">&#123;</span></span><br><span class="line">  updateStudent<span class="punctuation">(</span><span class="symbol">studentDto</span><span class="punctuation">:</span>StudentDTO<span class="punctuation">)</span><span class="punctuation">:</span>String</span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"><span class="keyword">type</span> Student<span class="punctuation">&#123;</span></span><br><span class="line">  <span class="symbol">id</span><span class="punctuation">:</span>Int</span><br><span class="line">  <span class="symbol">name</span><span class="punctuation">:</span>String</span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"><span class="keyword">input</span> StudentDTO<span class="punctuation">&#123;</span></span><br><span class="line">  <span class="symbol">id</span><span class="punctuation">:</span>Int</span><br><span class="line">  <span class="symbol">name</span><span class="punctuation">:</span>String</span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure></li></ul></li></ul></li><li>到此代码，测试编写完成，可以启动项目测试一下接口了。</li></ol><h4 id="网页工具测试"><a href="#网页工具测试" class="headerlink" title="网页工具测试"></a>网页工具测试</h4><ul><li>项目启动后，我们可以返回GraphiQL网站查看自己的GraphQL文档，并调试</li><li>访问地址：<a href="http://localhost:8889/graphiql">http://localhost:8889/graphiql</a> 端口号为启动服务的端口号，我这里是8889<br><img src="https://gcore.jsdelivr.net/gh/zhengmuxin/picb/d396992182a445deb44c314c255b337e.png" alt=""><br>如图所示，我们页面左侧编写GraphQL请求，中间返回请求得到的数据，最后侧我们可以看到自己编写的GraphQL文档。</li><li>试着访问刚才写的查询接口，点击左上方的三角形按钮即可运行  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  getStudent(flag: &quot;1&quot;) &#123;</span><br><span class="line">    id</span><br><span class="line">    name</span><br><span class="line">  &#125;</span><br><span class="line">  hello</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>返回结果<br><img src="https://gcore.jsdelivr.net/gh/zhengmuxin/picb/2420c7e786b84eb5b8d86b4b3e46415b.png" alt=""></li><li>我们可以发现，一个请求我们同时调用了getStudent(String flag)和hello()两个接口，并且同时得到了它们的返回数据。并且如果你想要在getStudent返回的时候，只返回id的列表，那么你在查询时可以不写name字段，这样返回的结果便不会携带name(即实现了按要求返回)<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"> &#123;</span><br><span class="line">  getStudent(flag: &quot;1&quot;) &#123;</span><br><span class="line">    id</span><br><span class="line">  &#125;</span><br><span class="line">  hello</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>返回结果<br><img src="https://gcore.jsdelivr.net/gh/zhengmuxin/picb/ee173acf9ce149ebb8e6aa468f2af2d9.png" alt=""></li></ul></li><li>再试一下修改接口  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">mutation&#123;</span><br><span class="line">  updateStudent(studentDto:&#123;</span><br><span class="line">    id:1</span><br><span class="line">  name:&quot;zmx&quot;&#125;</span><br><span class="line">  )</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><ul><li>返回结果<br><img src="https://gcore.jsdelivr.net/gh/zhengmuxin/picb/e3931baf055a44e39d6ea827b513a7ce.png" alt=""><h4 id="postman测试"><a href="#postman测试" class="headerlink" title="postman测试"></a>postman测试</h4></li></ul></li><li>除了可以用GraphiQL网页进行测试之外，我们还可以使用PostMan进行测试<ul><li>查询<br><img src="https://gcore.jsdelivr.net/gh/zhengmuxin/picb/20091932718645b3ab2a442f2fe0db95.png" alt=""></li><li>修改<br><img src="https://gcore.jsdelivr.net/gh/zhengmuxin/picb/56e5723cea734d49a3a1a46e95f71b5a.png" alt=""></li></ul></li><li>注意要点：<ul><li>请求为POST请求</li><li>Url为 <a href="http://localhost:8889/graphql">http://localhost:8889/graphql</a></li><li>选择请求体(body),选择”GraphQL”。</li><li>下方GRAPHQL VARIABLES的框内，可以填入请求的参数，在修改学生信息接口中为StudentDTO对象。<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3></li></ul></li><li>本文简单的介绍了GraphQL，并将其与Spring Boot整合起来，简单用其实现了几个接口，并进行接口调用。目的在于认识GraphQL，并能进行简单使用。GraphQL的内容还有很多，文章没讲到的部分，就靠大家自己研究啦。</li></ul>]]></content>
      
      
      <categories>
          
          <category> GraphQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring </tag>
            
            <tag> GraphQL </tag>
            
            <tag> Postman </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>记录 -- 个人博客搭建</title>
      <link href="/posts/grbkdj/"/>
      <url>/posts/grbkdj/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="记录-—-个人博客搭建"><a href="#记录-—-个人博客搭建" class="headerlink" title="记录 — 个人博客搭建"></a>记录 — 个人博客搭建</h3><h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><p>&nbsp;&nbsp;&nbsp;&nbsp;终于，在2023年12月17日，我的博客终于初步完成了。为了纪念它的问世，特地写这么一篇文章来记录一下。</p><h4 id="为什么要搞博客"><a href="#为什么要搞博客" class="headerlink" title="为什么要搞博客"></a>为什么要搞博客</h4><p>&nbsp;&nbsp;&nbsp;&nbsp;从大学选择计算机专业的那天，我就满怀憧憬，幻想着学成之后，利用代码破译机密，改变世界。emm...然而好像不是这样，在2023年，大多数人只能当小小码农。但在当时，看到网上那些花里胡哨，特效漫天的网站，我也默默在记事本上写下，有一天我也要写一个自己的博客网站，记录生活也好，写写学习总结也好，发发牢骚也好。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;但是,阴差阳错之间，我主打的方向成了后端，写美美的博客这个想法也被我渐渐忘记了。嘿嘿。最近因为一直有在csdn上写一些学习记录，某天翻看到其他大佬从自己的博客上搬运过来的文章，我点击进入他的博客，看他在其中发表自己的作品，述说自己的生活感悟，那种感觉回来了，我记起了那个做个自己的博客的计划。于是这次我没有三分钟热度，开始着手完成这个计划。</p><h4 id="怎么做的博客"><a href="#怎么做的博客" class="headerlink" title="怎么做的博客"></a>怎么做的博客</h4><p>&nbsp;&nbsp;&nbsp;&nbsp;既然决定要做，我就开始查阅资料。对于前端我并不熟悉，好在现在有很多好用的博客框架，可以快速的搭建一个博客，我选择的是Hexo(文章用markdown形式来写，真的很方便)加上JerryC大佬创作的butterfly主题，利用gitee的Pages服务，完成了博客的搭建。在这个过程中，我通过阅读框架文档，一步步充实博客的内容。为了让博客变得更酷，我也是在网上借鉴了(喜欢就CV哈哈哈)其他大佬写的优化方案，将他们插入到自己的博客中来，也是特别感谢这些厉害的前端大佬(在友链里也记录了他们)。总之花了一段时间的研究，也算是有了一定的成果吧。</p><h4 id="我的收获"><a href="#我的收获" class="headerlink" title="我的收获"></a>我的收获</h4><p>&nbsp;&nbsp;&nbsp;&nbsp;虽然这个博客看上去平平无奇，但怎么说也是完成我的小小计划吧，我也可以在我的小小天地里发自己的喜欢的内容了。在这个过程中我也发现，一开始以为搞个博客是很难的计划，结果真正开始做发现其实并没有想象中的难(我是说把初步的博客搭起来，设计样式还是要花时间的)，我只花了几天就把这个博客的初步框架给搭好了。真正重要的应该是行动力吧，不要光想不做，然后开始做之后，就要认真地做，不要中途放弃，每实现一点功能，就能感受到一点喜悦，这样的过程并不会感到枯燥。遇到不好理解的地方只要查看技术文档，或者看各种技术博客上大佬的帖子就好了，现在我也对Hexo+Butterfly这套组合轻车熟路了哈哈哈</p><h4 id="未来怎么做"><a href="#未来怎么做" class="headerlink" title="未来怎么做"></a>未来怎么做</h4><p>&nbsp;&nbsp;&nbsp;&nbsp;写着写着，我也不知道我在写什么了，哈哈哈。关于这个博客，现在暂时就告一段落吧，已经可以在上面发表文章了。但是现在还是在gitee pages上的，感觉不是很正式，以后可能会搞个个人域名吧(现在没有米)。还有一些功能像是评论，在线聊天这种未来有时间再搞吧，先记录下来(可能又要忘了也说不定呀~)。好了就先这样吧，bye~</p>]]></content>
      
      
      <categories>
          
          <category> 记录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 博客 </tag>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Oracle--查出某个特定值在哪些表的哪些字段中出现，并将结果存入新表</title>
      <link href="/posts/occmgtdzznxbdnxzdzcxbjjgcrxb/"/>
      <url>/posts/occmgtdzznxbdnxzdzcxbjjgcrxb/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h4 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h4><ul><li>在开发中经常出现需要将表的某个字段的值修改，又怕影响其关联表，这时需要对表中的字段值进行评估，由于表的数量很多，于是可以采用SQL语句将某个特定值在所有表中哪个字段出现的位置查出来，进行评估。这篇文章将讲解Oracle数据库如何实现该功能，如果您使用的数据库是MySQL可以查看这篇文章：<a href="https://blog.csdn.net/weixin_46599489/article/details/134988783">MySQL—查出某个特定值在哪些表的哪些字段中出现，并将结果存入新表</a></li></ul><h4 id="具体方法"><a href="#具体方法" class="headerlink" title="具体方法"></a>具体方法</h4><ol><li>先创建一个表SEARCH_VALUE以保存查出的数据<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> OMS_NJ.SEARCH_VALUE (</span><br><span class="line">    ID VARCHAR2(<span class="number">100</span>),</span><br><span class="line">    TABLE_NAME VARCHAR2(<span class="number">100</span>) <span class="keyword">NULL</span>,</span><br><span class="line">    COLUMN_NAME VARCHAR2(<span class="number">100</span>) <span class="keyword">NULL</span>,</span><br><span class="line">    SEARCH_VAL VARCHAR2(<span class="number">100</span>) <span class="keyword">NULL</span>,</span><br><span class="line">    <span class="keyword">CONSTRAINT</span> SEARCH_VALUE_PK <span class="keyword">PRIMARY</span> KEY (ID)</span><br><span class="line">)</span><br><span class="line">TABLESPACE USERS;</span><br></pre></td></tr></table></figure></li></ol><ul><li>上述SQL语句中，id为表的主键，table_name为查询到的数据库表名，column_name为表中的列名，search_val为本次查询的值。</li></ul><ol><li>接下来是重头戏，采用SQL语句将某个特定值在所有表中哪个字段出现的位置查出来并存入上述的SEARCH_VALUE表中。<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DECLARE</span>                    <span class="comment">--此处申明所要使用的值</span></span><br><span class="line">   <span class="keyword">value</span> varchar2(<span class="number">100</span>);   <span class="comment">--需要搜索的值</span></span><br><span class="line">   insertSql <span class="type">varchar</span>(<span class="number">200</span>); <span class="comment">--插入语句</span></span><br><span class="line">   checkSql <span class="type">varchar</span>(<span class="number">200</span>); <span class="comment">--检测语句</span></span><br><span class="line">   checkNum number;       <span class="comment">--检测语句输出的值,不为0则进行插入操作</span></span><br><span class="line">   dbValue <span class="type">varchar</span>(<span class="number">100</span>) ;  <span class="comment">--数据库名</span></span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">    DBMS_OUTPUT.ENABLE(buffer_size <span class="operator">=</span><span class="operator">&gt;</span> <span class="keyword">null</span>); <span class="comment">--将控制台打印的缓存设置为无限，如不需要打印，可不加</span></span><br><span class="line">    <span class="keyword">value</span> :<span class="operator">=</span> <span class="string">&#x27;admin&#x27;</span> ; <span class="comment">--需要搜索的值，即特定值为admin</span></span><br><span class="line">    dbValue :<span class="operator">=</span> <span class="string">&#x27;myDB&#x27;</span>; <span class="comment">--这次查询的数据库名</span></span><br><span class="line">    <span class="keyword">FOR</span> tn <span class="keyword">IN</span> (<span class="keyword">SELECT</span> TABLE_NAME <span class="keyword">FROM</span> all_tables <span class="keyword">WHERE</span> OWNER <span class="operator">=</span> dbValue ) LOOP <span class="comment">--查出数据库中所有表的表名</span></span><br><span class="line">        IF instr(tn.TABLE_NAME,<span class="string">&#x27;ACT_&#x27;</span>) <span class="operator">&lt;&gt;</span> <span class="number">1</span>   <span class="comment">--屏蔽掉ACT_开头的表，项目中如果使用了工作流，会有这样的工作流表，可以采用这种方法屏蔽</span></span><br><span class="line">        <span class="keyword">THEN</span> </span><br><span class="line">            DBMS_OUTPUT.PUT_LINE(instr(tn.TABLE_NAME,<span class="string">&#x27;ACT_&#x27;</span>));  <span class="comment">----只是为了控制台打印，不必要</span></span><br><span class="line">            <span class="keyword">FOR</span> cn <span class="keyword">IN</span> (<span class="keyword">SELECT</span> column_name <span class="keyword">FROM</span> user_tab_columns <span class="keyword">WHERE</span> table_name <span class="operator">=</span> tn.TABLE_NAME) LOOP            </span><br><span class="line">                <span class="comment">-- 查询当前表的当前字段中是否查得到</span></span><br><span class="line">                checkSql :<span class="operator">=</span> <span class="string">&#x27;SELECT COUNT(*)  FROM &#x27;</span> <span class="operator">||</span> tn.TABLE_NAME <span class="operator">||</span> <span class="string">&#x27; WHERE &quot;&#x27;</span> <span class="operator">||</span> cn.column_name  <span class="operator">||</span> <span class="string">&#x27;&quot;&#x27;</span> <span class="operator">||</span> <span class="string">&#x27; LIKE &#x27;</span> <span class="operator">||</span> <span class="string">&#x27;&#x27;&#x27;%&#x27;</span> <span class="operator">||</span> <span class="keyword">value</span> <span class="operator">||</span> <span class="string">&#x27;%&#x27;&#x27; AND ROWNUM = 1&#x27;</span>;</span><br><span class="line">                <span class="keyword">EXECUTE</span> IMMEDIATE (checkSql) <span class="keyword">INTO</span> checkNum; <span class="comment">--将查到的结果存入checkNum中</span></span><br><span class="line">                DBMS_OUTPUT.PUT_LINE(checkNum); <span class="comment">--只是为了控制台打印，不必要</span></span><br><span class="line">                IF checkNum <span class="operator">&lt;&gt;</span> <span class="number">0</span> <span class="keyword">THEN</span> <span class="comment">--判断当前是否能查得到数据,若无数据则不进行插入操作</span></span><br><span class="line">                    <span class="keyword">BEGIN</span>                                       </span><br><span class="line">                        insertSql :<span class="operator">=</span> <span class="string">&#x27;INSERT INTO SEARCH_VALUE(ID,TABLE_NAME,COLUMN_NAME,SEARCH_VAL) VALUES(&#x27;&#x27;&#x27;</span> <span class="operator">||</span> to_char(<span class="built_in">CURRENT_TIMESTAMP</span>(),<span class="string">&#x27;YYYY-MM-DD HH24:MI:SS.ff3&#x27;</span>) <span class="operator">||</span> <span class="string">&#x27;&#x27;&#x27;,&#x27;&#x27;&#x27;</span> <span class="operator">||</span> tn.TABLE_NAME <span class="operator">||</span> <span class="string">&#x27;&#x27;&#x27;,&#x27;&#x27;&#x27;</span> <span class="operator">||</span> cn.column_name <span class="operator">||</span> <span class="string">&#x27;&#x27;&#x27;,&#x27;&#x27;&#x27;</span> <span class="operator">||</span> <span class="keyword">value</span> <span class="operator">||</span> <span class="string">&#x27;&#x27;&#x27;)&#x27;</span>;</span><br><span class="line">                        DBMS_OUTPUT.PUT_LINE(insertSql); <span class="comment">--只是为了控制台打印，不必要</span></span><br><span class="line">                        <span class="keyword">EXECUTE</span> IMMEDIATE (insertSql);                     </span><br><span class="line">                    <span class="keyword">END</span>;</span><br><span class="line">                <span class="keyword">END</span> IF;</span><br><span class="line">            <span class="keyword">END</span> LOOP;</span><br><span class="line">        <span class="keyword">END</span> IF;</span><br><span class="line">    <span class="keyword">END</span> LOOP;   </span><br><span class="line"><span class="keyword">END</span>;</span><br></pre></td></tr></table></figure></li></ol><ul><li>上述SQL语句比较长，下面做要点分析<ol><li>取出数据库中所有的表的名称<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> TABLE_NAME <span class="keyword">FROM</span> all_tables <span class="keyword">WHERE</span> OWNER <span class="operator">=</span> <span class="string">&#x27;数据库的名称&#x27;</span>   </span><br></pre></td></tr></table></figure></li><li>取出某张表中的所有字段<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> column_name <span class="keyword">FROM</span> user_tab_columns <span class="keyword">WHERE</span> table_name <span class="operator">=</span> <span class="string">&#x27;表的名称&#x27;</span></span><br></pre></td></tr></table></figure></li><li>通过两次for循环，利用count（）聚合函数判断某表某字段是否存在要查询的特定值。将结果存入checkNum中，若查出checkNum不为零，即存在特定值，则将该条记录插入到SEARCH_VALUE表中，此处插入时，将插入时的时间作为SEARCH_VALUE表的id。<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">EXECUTE</span> IMMEDIATE (checkSql) <span class="keyword">INTO</span> checkNum; </span><br><span class="line"> <span class="comment">--注意此处使用 into 关键字的时候 要确保前面的结果不为空</span></span><br></pre></td></tr></table></figure><h4 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h4><img src="https://gcore.jsdelivr.net/gh/zhengmuxin/picb/57471065be204acebc4025bc1307476b.png" alt=""></li></ol></li></ul>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SQL </tag>
            
            <tag> Oracle </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java框架--Spring（事务，@Transactional）的学习笔记</title>
      <link href="/posts/jkjsswdxxbj/"/>
      <url>/posts/jkjsswdxxbj/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="Spring-事务管理"><a href="#Spring-事务管理" class="headerlink" title="Spring 事务管理"></a>Spring 事务管理</h3><h4 id="什么是事务"><a href="#什么是事务" class="headerlink" title="什么是事务?"></a>什么是事务?</h4><ul><li>事务是一个不可分割的数据库操作序列，也是数据库并发控制的基本单位，其执行的结果必须使数据库从一种一致性状态变到另一种一致性状态。事务是逻辑上的一组操作，要么都执行，要么都不执行。</li><li>最经典的事务例子当属银行转账，A转账给B一百块的流程要经过两个操作，将A账户减少100块，B账户增加100块，若此时银行系统发生崩溃，可能发生A账户金额减少而B账户金额不增加，造成错误。故事务就是要保证这样的操作要么同时完成，要么同时失败。<h4 id="事务的四大特性（ACID）"><a href="#事务的四大特性（ACID）" class="headerlink" title="事务的四大特性（ACID）"></a>事务的四大特性（ACID）</h4></li><li><em>原子性</em>：事务是最小的执行单元，不允许分割，事务中的操作要么全部完成，要么都失败。</li><li><em>一致性</em>：事务执行前后数据库的状态保持一致，多个事务对同一个数据读取的结果是相同的。</li><li><em>隔离性</em>：并发访问数据库时，一个事务的执行不会被另一个事务影响或干扰。</li><li><em>持久性</em>：事务执行完成后，对数据库的改变是持久的。即使数据库发生故障也不会影响。<h5 id="如何保证ACID？"><a href="#如何保证ACID？" class="headerlink" title="如何保证ACID？"></a>如何保证ACID？</h5></li><li>数据库中用==锁== 、==并发与多版本== （非阻塞读）保持==一致性== 和==隔离性== ，用事务的commit,rollback,savepoint保持==原子性== ，用数据库文件保持持久性，断电后，内存数据丢失，硬盘文件数据不丢失，重启后从文件中加载到内存，保持==持久性==。<h4 id="脏读，不可重复读和幻读"><a href="#脏读，不可重复读和幻读" class="headerlink" title="脏读，不可重复读和幻读"></a>脏读，不可重复读和幻读</h4></li><li><em>脏读(Drity Read)</em>：某个事务已更新一份数据，另一个事务在此时读取了同一份数据，由于某些原因，前一个事务回滚（RollBack）了操作，则后一个事务所读取的数据就会是不正确的。</li><li><em>不可重复读(Non-repeatable read)</em>：在一个事务的两次查询之中数据不一致，这可能是两次查询过程中间插入了一个事务更新的原有的数据。</li><li><em>幻读(Phantom Read)</em>：在一个事务的两次查询中数据笔数不一致，例如有一个事务查询了几列(Row)数据，而另一个事务却在此时插入了新的几列数据，先前的事务在接下来的查询中，就会发现有几列数据是它先前所没有的。<h4 id="事务的隔离等级"><a href="#事务的隔离等级" class="headerlink" title="事务的隔离等级"></a>事务的隔离等级</h4></li><li>为了达到事务的四大特性，数据库定义了4种不同的事务隔离级别，由低到高依次为Read uncommitted、Read committed、Repeatable read、Serializable，这四个级别可以逐个解决脏读、不可重复读、幻读这几类问题。</li></ul><div class="table-container"><table><thead><tr><th>隔离级别</th><th>脏读</th><th>不可重复读</th><th>幻读</th></tr></thead><tbody><tr><td>读取未提交（READ- UNCOMMITTED）</td><td>√</td><td>√</td><td>√</td></tr><tr><td>读取已提交（READ- COMMITTED）</td><td>×</td><td>√</td><td>√</td></tr><tr><td>可重复读（REPEATABLE- READ）</td><td>×</td><td>×</td><td>√</td></tr><tr><td>可串行化（SERIALIZABLE）</td><td>×</td><td>×</td><td>×</td></tr></tbody></table></div><ul><li>因为隔离级别越低，事务请求的锁越少，有时候为了性能考虑，不会将隔离级别设置得太高。</li><li>Mysql 默认采用的 REPEATABLE_READ隔离级别。 Oracle默认采用的READ_COMMITTED隔离级别。<h4 id="事务的传播行为"><a href="#事务的传播行为" class="headerlink" title="事务的传播行为"></a>事务的传播行为</h4></li><li>当事务方法被另一个事务方法调用时，必须指定事务应该如何传播。例如：方法可能继续在现有事务中运行，也可能开启一个新事务，并在自己的事务中运行。Spring定义了七种传播行为：</li><li>保证在同一个事务中：</li></ul><div class="table-container"><table><thead><tr><th>传播行为</th><th>含义</th></tr></thead><tbody><tr><td>PROPAGATION_REQUIRED</td><td>表示当前方法必须运行在事务中。如果当前事务存在，方法将会在该事务中运行。否则，会启动一个新的事务。</td></tr><tr><td>PROPAGATION_SUPPORTS</td><td>表示当前方法不需要事务上下文，但是如果存在当前事务的话，那么该方法会在这个事务中运行。</td></tr><tr><td>PROPAGATION_MANDATORY</td><td>表示该方法必须在事务中运行，如果当前事务不存在，则会抛出一个异常</td></tr></tbody></table></div><ul><li>保证不在同一个事务里面</li></ul><div class="table-container"><table><thead><tr><th>传播行为</th><th>含义</th></tr></thead><tbody><tr><td>PROPAGATION_REQUIRED_NEW</td><td>表示当前方法必须运行在它自己的事务中。一个新的事务将被启动。如果存在当前事务，在该方法执行期间，当前事务会被挂起。如果使用JTATransactionManager的话，则需要访问TransactionManager</td></tr><tr><td>PROPAGATION_NOT_SUPPORTED</td><td>表示该方法不应该运行在事务中。如果存在当前事务，在该方法运行期间，当前事务将被挂起。如果使用JTATransactionManager的话，则需要访问TransactionManager</td></tr><tr><td>PROPAGATION_NEVER</td><td>表示当前方法不应该运行在事务上下文中。如果当前正有一个事务在运行，则会抛出异常</td></tr><tr><td>PROPAGATION_NESTED</td><td>表示如果当前已经存在一个事务，那么该方法将会在嵌套事务中运行。嵌套的事务可以独立于当前事务进行单独地提交或回滚。如果当前事务不存在，那么其行为与PROPAGATION_REQUIRED一样。</td></tr></tbody></table></div><h4 id="Spring声明式事务如何工作（Spring的事务管理如何实现）？"><a href="#Spring声明式事务如何工作（Spring的事务管理如何实现）？" class="headerlink" title="Spring声明式事务如何工作（Spring的事务管理如何实现）？"></a>Spring声明式事务如何工作（Spring的事务管理如何实现）？</h4><h5 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h5><ul><li>当Spring容器启动的时候，发现启动类上有@EnableTransactionManagement注解，此时会拦截所有bean的创建，扫描bean上是否有@Transactional注解（类，或者父类，接口，方法上有这个注解都可以），如果有这个注解，Spring会通过AOP的方式生成代理对象，代理对象中会增加一个事务拦截器，拦截器会拦截bean中的public方法执行，会在方法执行之前启动事务，方法执行完毕之后提交或者回滚事务。<h5 id="执行过程"><a href="#执行过程" class="headerlink" title="执行过程"></a>执行过程</h5></li><li>Spring事务的底层是基于数据库事务和aop机制的，首先要生成代理对象，然后按照aop的流程来执行具体的逻辑，但事务不是通过通知来实现的，而是通过一个TransactionInterceptor来实现的，然后调用invoke来实现具体的逻辑。</li></ul><ol><li>解析事务相关的属性，对于使用了@Transactional注解的bean，Spring会启动一个代理对象作为bean。</li><li>当调用代理对象的方法时，会对其中public 方法（增加了@Transactional注解或者其所属类上加了@Transactional注解）利用事务管理器创建一个数据库连接。</li><li>修改数据库连接的autoCommit（）方法的属性为false，关闭此连接的事务自动提交功能。</li><li>执行具体的SQL逻辑操作。</li><li>在执行过程中，如果执行失败了，会通过completeTransactionAfterThrowing方法来完成事务的回滚操作，回滚的具体操作是通过doRollBack方法来实现的，实现的时候也是要获取连接，通过连接对象的RollBack方法来实现回滚。</li><li>如果执行过程中，没有意外发生，会通过commitTransactionAfterReturning方法来完成事务的提交操作，提交的具体操作是通过doCommit方法来实现的，实现的时候也是要获取连接，通过连接对象的Commit方法来实现事务提交。</li><li>当事务执行完毕之后需要清除相关事务信息，调用cleanupTransactionInfo方法。</li></ol><ul><li>注：<ul><li>Spring事务的隔离级别对应的就是数据库的隔离级别。</li><li>Spring事务的传播机制是基于数据库连接来做的，一个数据库连接就是一个事务，如果传播机制配置为需要新开一个事务，那么实际上就是先新建一个数据库连接，在此新数据库连接上执行sql。</li></ul></li></ul><h4 id="Transactional注解"><a href="#Transactional注解" class="headerlink" title="@Transactional注解"></a>@Transactional注解</h4><h5 id="Transactional注解的属性设置"><a href="#Transactional注解的属性设置" class="headerlink" title="@Transactional注解的属性设置"></a>@Transactional注解的属性设置</h5><div class="table-container"><table><thead><tr><th>属性</th><th>类型</th><th>描述</th></tr></thead><tbody><tr><td>value</td><td>String</td><td>可限定的描述述符，指定使用的事务管理器</td></tr><tr><td>propagation</td><td>enum:propagation</td><td>可选的事务传播行为设置</td></tr><tr><td>isolation</td><td>enum:Isolation</td><td>可选的事务隔离级别设置</td></tr><tr><td>readonly</td><td>boolean</td><td>读写或只读事务，默认读写</td></tr><tr><td>timeout</td><td>int  （in  seconds  granularity)</td><td>事务超时时间设置</td></tr><tr><td>rollbackFor</td><td>class 对象数组，必须继承throwable</td><td>导致事务回滚的异常类数组</td></tr><tr><td>rollbackForClassName</td><td>类名数组，必须继承自Throwable</td><td>导致事务回滚的异常类名字数组</td></tr><tr><td>noRollBackFor</td><td>Class 对象数组，必须继承自Throwable</td><td>不会导致事务回滚的异常类数组</td></tr><tr><td>noRollbackForClassName</td><td>类名数组，必须继承自Throwable</td><td>不会导致事务回滚的异常类名字数组。</td></tr></tbody></table></div><h5 id="Transactional注解不开启事务的问题（使用原则）？"><a href="#Transactional注解不开启事务的问题（使用原则）？" class="headerlink" title="@Transactional注解不开启事务的问题（使用原则）？"></a>@Transactional注解不开启事务的问题（使用原则）？</h5><ul><li><strong>需要在启动类上添加@EnableTransactionManagement注解，表示开启事务</strong>。</li><li><strong>@Transactional这个注解只能加在public方法上面</strong>。事务拦截器在目标方法执行前后进行拦截，内部会调用方法来获取Transactional 注解的事务配置信息，调用前会检查目标方法的修饰符是否为 public，不是 public则不会获取@Transactional 的属性配置信息。</li><li><strong>@Transactional对于运行时异常和错误事务会回滚，但是检查异常就不会回滚，此时可以加属性rollbackFor = Exception.class</strong>。</li><li><strong>不要在业务层区捕获异常，在控制器层捕获，否则事务不会回滚。</strong>因为异常已经被捕获处理，所以事务便不会回滚。</li><li>使用该注解需要添加aop的依赖。</li><li>该注解所属类需要被spring管理。</li><li><strong>数据库引擎是否支持</strong>。确认数据库引擎是否为InnoDB，MYISAM是不支持事务的。</li><li><strong>同一个类中方法调用，导致@Transactional失效</strong>，开发中避免不了会对同一个类里面的方法调用，比如有一个类Test，它的一个方法A，A再调用本类的方法B（不论方法B是用public还是private修饰），但方法A没有声明注解事务，而B方法有。则外部调用方法A之后，方法B的事务是不会起作用的。这是由于使用Spring AOP代理造成的，因为只有当事务方法被当前类以外的代码调用时，才会由Spring生成的代理对象来管理。</li><li><strong>开启多线程任务时，事务管理会受到影响</strong>。因为线程不属于spring托管，故线程不能够默认使用spring的事务,也不能获取spring注入的bean在被spring声明式事务管理的方法内开启多线程，多线程内的方法不被事务控制。</li></ul>]]></content>
      
      
      <categories>
          
          <category> Spring </category>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Spring </tag>
            
            <tag> 数据库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL--查出某个特定值在哪些表的哪些字段中出现，并将结果存入新表</title>
      <link href="/posts/mccmgtdzznxbdnxzdzcxbjjgcrxb/"/>
      <url>/posts/mccmgtdzznxbdnxzdzcxbjjgcrxb/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h4 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h4><ul><li>在开发中经常出现需要将表的某个字段的值修改，又怕影响其关联表，这时需要对表中的字段值进行评估，由于表的数量很多，于是可以采用SQL语句将某个特定值在所有表中哪个字段出现的位置查出来，进行评估。这篇文章将讲解MySQL数据库如何实现该功能，如果您使用的数据库是Oracle可以查看这篇文章：<a href="https://blog.csdn.net/weixin_46599489/article/details/131043621">Oracle—查出某个特定值在哪些表的哪些字段中出现，并将结果存入新表</a><h4 id="具体方法"><a href="#具体方法" class="headerlink" title="具体方法"></a>具体方法</h4><h5 id="先创建一个表SEARCH-VALUE以保存查出的数据"><a href="#先创建一个表SEARCH-VALUE以保存查出的数据" class="headerlink" title="先创建一个表SEARCH_VALUE以保存查出的数据"></a>先创建一个表SEARCH_VALUE以保存查出的数据</h5><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `SEARCH_VALUE` (</span><br><span class="line">  table_name <span class="type">varchar</span>(<span class="number">100</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  column_name <span class="type">varchar</span>(<span class="number">100</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  search_val <span class="type">varchar</span>(<span class="number">100</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  id <span class="type">varchar</span>(<span class="number">100</span>) <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8mb4 <span class="keyword">COLLATE</span> utf8mb4_0900_ai_ci <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`id`)</span><br><span class="line">)</span><br></pre></td></tr></table></figure></li><li>上述SQL语句中，id为表的主键，table_name为查询到的数据库表名，column_name为表中的列名，search_val为本次查询的值。<h5 id="创建存储过程"><a href="#创建存储过程" class="headerlink" title="创建存储过程"></a>创建存储过程</h5>接下来是重头戏，采用MySQL存储过程将某个特定值在所有表中哪个字段出现的位置查出来并存入上述的SEARCH_VALUE表中。<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 存储过程删除语句</span></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">procedure</span> search_and_insert;  </span><br><span class="line"><span class="comment">-- 创建MySQL存储过程search_and_insert，其中dbname表示数据库的名称，searchValue表示要查的特定值</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">PROCEDURE</span> search_and_insert(<span class="keyword">in</span> dbname <span class="type">VARCHAR</span>(<span class="number">255</span>),<span class="keyword">in</span> searchValue <span class="type">VARCHAR</span>(<span class="number">255</span>))</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line"><span class="comment">-- 定义变量</span></span><br><span class="line"><span class="comment">-- 游标标记位</span></span><br><span class="line">    <span class="keyword">DECLARE</span> done <span class="type">INT</span> <span class="keyword">DEFAULT</span> <span class="number">0</span>;</span><br><span class="line">   <span class="comment">-- 表示数据库表名</span></span><br><span class="line">    <span class="keyword">DECLARE</span> tableName <span class="type">VARCHAR</span>(<span class="number">100</span>);</span><br><span class="line">   <span class="comment">-- 表示数据库字段名</span></span><br><span class="line">    <span class="keyword">DECLARE</span> columnName <span class="type">VARCHAR</span>(<span class="number">100</span>);</span><br><span class="line">   <span class="comment">-- 表示要查找的特定值 </span></span><br><span class="line">   <span class="keyword">DECLARE</span> valueToSearch <span class="type">VARCHAR</span>(<span class="number">100</span>);</span><br><span class="line">    <span class="keyword">DECLARE</span> checkNum <span class="type">INT</span>;</span><br><span class="line"><span class="comment">-- 此处采用游标获取数据库中每个表名和每个字段</span></span><br><span class="line">    <span class="keyword">DECLARE</span> cur <span class="keyword">CURSOR</span> <span class="keyword">FOR</span> </span><br><span class="line">        <span class="keyword">SELECT</span> TABLE_NAME, COLUMN_NAME</span><br><span class="line">        <span class="keyword">FROM</span> information_schema.columns</span><br><span class="line">        <span class="keyword">WHERE</span> table_schema <span class="operator">=</span> dbname</span><br><span class="line">        <span class="keyword">AND</span> TABLE_NAME <span class="keyword">NOT</span> <span class="keyword">LIKE</span> <span class="string">&#x27;ACT_%&#x27;</span>;  <span class="comment">-- 在这里指定一些不需要查找的表，此处是以ACT_开头的工作流</span></span><br><span class="line"><span class="comment">-- 在游标操作中当找不到更多记录时将done设置为1，以便结束循环</span></span><br><span class="line">    <span class="keyword">DECLARE</span> CONTINUE HANDLER <span class="keyword">FOR</span> <span class="keyword">NOT</span> FOUND <span class="keyword">SET</span> done <span class="operator">=</span> <span class="number">1</span>; </span><br><span class="line"></span><br><span class="line">    <span class="keyword">SET</span> valueToSearch <span class="operator">=</span> searchValue;</span><br><span class="line">   </span><br><span class="line">   <span class="comment">-- open游标cur</span></span><br><span class="line">    <span class="keyword">OPEN</span> cur;                     <span class="comment">-- </span></span><br><span class="line">    read_loop: LOOP</span><br><span class="line">        <span class="keyword">FETCH</span> cur <span class="keyword">INTO</span> tableName, columnName;  </span><br><span class="line">        IF done <span class="operator">=</span> <span class="number">1</span> <span class="keyword">THEN</span></span><br><span class="line">            LEAVE read_loop;</span><br><span class="line">        <span class="keyword">END</span> IF;</span><br><span class="line"></span><br><span class="line">       <span class="comment">-- 动态执行SQL语句 该SQL用于查出某个表某一个字段包含要查找的指定值的条数</span></span><br><span class="line">       <span class="keyword">SET</span> <span class="variable">@checkSql</span> <span class="operator">=</span> CONCAT(<span class="string">&#x27;SELECT COUNT(*) INTO @result FROM &#x27;</span>, tableName, <span class="string">&#x27; WHERE &#x27;</span>, columnName, <span class="string">&#x27; LIKE \&#x27;</span><span class="operator">%</span><span class="string">&#x27;, valueToSearch, &#x27;</span><span class="operator">%</span>\<span class="string">&#x27; LIMIT 1&#x27;</span>);</span><br><span class="line">        <span class="comment">-- 准备一个SQL语句</span></span><br><span class="line">       <span class="keyword">PREPARE</span> checkStmt <span class="keyword">FROM</span> <span class="variable">@checkSql</span>;</span><br><span class="line">       <span class="comment">-- 执行之前准备的SQL语句</span></span><br><span class="line">        <span class="keyword">EXECUTE</span> checkStmt;</span><br><span class="line">       <span class="comment">-- 来释放先前准备的SQL语句，以便释放资源并清理内存。</span></span><br><span class="line">        <span class="keyword">DEALLOCATE</span> <span class="keyword">PREPARE</span> checkStmt;</span><br><span class="line">       <span class="comment">-- 将@checkSql 语句的执行结果保存在checkNum</span></span><br><span class="line">  <span class="keyword">SELECT</span> <span class="variable">@result</span> <span class="keyword">INTO</span> checkNum;</span><br><span class="line">  <span class="comment">-- 如果checkNum大于0，就将这条记录存入Search_value表里</span></span><br><span class="line">        IF checkNum <span class="operator">&gt;</span> <span class="number">0</span> <span class="keyword">THEN</span>    </span><br><span class="line">        <span class="comment">-- 动态SQL将结果插入数据库SEARCH_VALUE，其中id主键用current_timestamp(6)日期表示，精确到毫秒第六位，确保主键唯一</span></span><br><span class="line">            <span class="keyword">SET</span> <span class="variable">@insertSql</span> <span class="operator">=</span> CONCAT(<span class="string">&#x27;INSERT INTO SEARCH_VALUE (ID, TABLE_NAME, COLUMN_NAME, SEARCH_VAL) VALUES (\&#x27;&#x27;, current_timestamp(6), &#x27;</span>\<span class="string">&#x27;, \&#x27;&#x27;, tableName, &#x27;</span>\<span class="string">&#x27;, \&#x27;&#x27;, columnName, &#x27;</span>\<span class="string">&#x27;, \&#x27;&#x27;, valueToSearch, &#x27;</span>\<span class="string">&#x27;)&#x27;</span>);</span><br><span class="line">            <span class="keyword">PREPARE</span> insertStmt <span class="keyword">FROM</span> <span class="variable">@insertSql</span>;</span><br><span class="line">            <span class="keyword">EXECUTE</span> insertStmt;</span><br><span class="line">            <span class="keyword">DEALLOCATE</span> <span class="keyword">PREPARE</span> insertStmt;</span><br><span class="line">        <span class="keyword">END</span> IF;</span><br><span class="line">    <span class="keyword">END</span> LOOP read_loop;</span><br><span class="line"><span class="comment">-- 关闭游标cur</span></span><br><span class="line">    <span class="keyword">CLOSE</span> cur;</span><br><span class="line"><span class="keyword">END</span></span><br></pre></td></tr></table></figure><h5 id="要点分析"><a href="#要点分析" class="headerlink" title="要点分析"></a>要点分析</h5></li></ul><ol><li>在MySQL取出数据库中所有的表和字段的名称。<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 这里的db_name根据需要换成对应的数据库名称</span></span><br><span class="line"><span class="keyword">SELECT</span> TABLE_NAME, COLUMN_NAME</span><br><span class="line"><span class="keyword">FROM</span> information_schema.columns</span><br><span class="line"><span class="keyword">WHERE</span> table_schema <span class="operator">=</span> <span class="string">&#x27;db_name&#x27;</span></span><br></pre></td></tr></table></figure></li><li>如果想查询某个数据库中所有表的详细信息，如表名，表注释，数据行数，存储引擎等，可以用下列SQL：<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 老样子，db_name换成你自己的数据库哈</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> information_schema.tables <span class="keyword">where</span> table_schema<span class="operator">=</span> <span class="string">&#x27;db_name&#x27;</span></span><br></pre></td></tr></table></figure></li><li>.如果想查询某个数据库中某张表的字段的详细信息，如字段名，字段注释，字段数据类型，字段权限，字段是否允许为空值等，可以用下列SQL：<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">--  db_name为数据库名，table_name为表名</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">INFORMATION_SCHEMA.COLUMNS</span><br><span class="line"><span class="keyword">WHERE</span> </span><br><span class="line">table_schema<span class="operator">=</span><span class="string">&#x27;db_name&#x27;</span> <span class="keyword">AND</span> table_name <span class="operator">=</span> <span class="string">&#x27;table_name&#x27;</span></span><br></pre></td></tr></table></figure></li><li>不同于Oracle使用for循环，在MySQL中我们使用游标（CURSOR ）来获取数据库的表名和字段名，然后判断我们要查找的特定值是否在这个表的这个字段中有记录（即上述的checkNum是否大于0），如果有记录，则用动态SQL插入我们创建的SEARCH_VALUE表中。</li></ol><h4 id="执行结果"><a href="#执行结果" class="headerlink" title="执行结果"></a>执行结果</h4><ul><li>执行存储过程<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 调用存储过程search_and_insert，&#x27;Data_Center&#x27;为我要查找的数据库，&#x27;笨&#x27;为我要找到的特定值</span></span><br><span class="line"><span class="keyword">call</span> search_and_insert(<span class="string">&#x27;Data_Center&#x27;</span>,<span class="string">&#x27;笨&#x27;</span>);</span><br></pre></td></tr></table></figure></li><li><p>执行结果</p><p><img src="https://gcore.jsdelivr.net/gh/zhengmuxin/picb/7e3c571d30d1408caa8f71202ea01565.png" alt=""></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SQL </tag>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java--项目引入Swagger、knife4j文档，Swagger配置类设置，Swagger注解介绍</title>
      <link href="/posts/jxmyrskspzlszszjjs/"/>
      <url>/posts/jxmyrskspzlszszjjs/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h3><ul><li>在我们项目中，经常需要Swagger生成测试接口文档，方便开发人员对接口进行测试与联调，下面主要讲解如何在项目中启用Swagger与增强的knife4j文档。<h3 id="引入依赖"><a href="#引入依赖" class="headerlink" title="引入依赖"></a>引入依赖</h3></li><li>在项目的pom.xml文件里添加swagger依赖<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.springfox<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springfox-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.0.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.xiaoymin<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>knife4j-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.0.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="swagger配置类"><a href="#swagger配置类" class="headerlink" title="swagger配置类"></a>swagger配置类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableSwagger2</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@EnableKnife4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SwaggerConfig</span>  <span class="keyword">implements</span> <span class="title class_">ApplicationListener</span>&lt;WebServerInitializedEvent&gt; &#123;</span><br><span class="line">    <span class="keyword">private</span> SecurityScheme <span class="title function_">securitySchemes</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ApiKey</span>(<span class="string">&quot;Authorization&quot;</span>, <span class="string">&quot;Authorization&quot;</span>, <span class="string">&quot;header&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> SecurityContext <span class="title function_">securityContexts</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> SecurityContext.builder()</span><br><span class="line">                .securityReferences(defaultAuth())</span><br><span class="line">                .forPaths(PathSelectors.any())</span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 加入请求头&quot;Authorization&quot;，可以放我们项目生成的token，以进行Spring Security的权限认证</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;SecurityReference&gt; <span class="title function_">defaultAuth</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">AuthorizationScope</span> <span class="variable">authorizationScope</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AuthorizationScope</span>(<span class="string">&quot;xxx&quot;</span>, <span class="string">&quot;描述信息&quot;</span>);</span><br><span class="line">        AuthorizationScope[] authorizationScopes = <span class="keyword">new</span> <span class="title class_">AuthorizationScope</span>[<span class="number">1</span>];</span><br><span class="line">        authorizationScopes[<span class="number">0</span>] = authorizationScope;</span><br><span class="line">        <span class="keyword">return</span> Arrays.asList(<span class="keyword">new</span> <span class="title class_">SecurityReference</span>(<span class="string">&quot;Authorization&quot;</span>, authorizationScopes));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Docket <span class="title function_">api</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Docket</span>(DocumentationType.SWAGGER_2)</span><br><span class="line">                .select()</span><br><span class="line">                .apis(RequestHandlerSelectors.any())</span><br><span class="line">                .paths(PathSelectors.any())</span><br><span class="line">                .build()</span><br><span class="line">                .securityContexts(Arrays.asList(securityContexts()))</span><br><span class="line">                .securitySchemes(Arrays.asList(securitySchemes()))</span><br><span class="line">                .apiInfo(<span class="keyword">new</span> <span class="title class_">ApiInfoBuilder</span>()</span><br><span class="line">                        .description(<span class="string">&quot;接口文档的描述信息&quot;</span>)</span><br><span class="line">                        .title(<span class="string">&quot;xx项目接口文档&quot;</span>)</span><br><span class="line">                        .contact(<span class="keyword">new</span> <span class="title class_">Contact</span>(<span class="string">&quot;zmx&quot;</span>,<span class="string">&quot;http://www.javaboy.org&quot;</span>,<span class="string">&quot;123456789@qq.com&quot;</span>))</span><br><span class="line">                        .version(<span class="string">&quot;v1.0&quot;</span>)</span><br><span class="line">                        .license(<span class="string">&quot;Apache2.0&quot;</span>)</span><br><span class="line">                        .build());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> BeanPostProcessor <span class="title function_">springfoxHandlerProviderBeanPostProcessor</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">BeanPostProcessor</span>() &#123;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> Object <span class="title function_">postProcessAfterInitialization</span><span class="params">(Object bean, String beanName)</span> <span class="keyword">throws</span> BeansException &#123;</span><br><span class="line">                <span class="keyword">if</span> (bean <span class="keyword">instanceof</span> WebMvcRequestHandlerProvider || bean <span class="keyword">instanceof</span> WebFluxRequestHandlerProvider) &#123;</span><br><span class="line">                    customizeSpringfoxHandlerMappings(getHandlerMappings(bean));</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span> bean;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">private</span> &lt;T <span class="keyword">extends</span> <span class="title class_">RequestMappingInfoHandlerMapping</span>&gt; <span class="keyword">void</span> <span class="title function_">customizeSpringfoxHandlerMappings</span><span class="params">(List&lt;T&gt; mappings)</span> &#123;</span><br><span class="line">                List&lt;T&gt; copy = mappings.stream()</span><br><span class="line">                        .filter(mapping -&gt; mapping.getPatternParser() == <span class="literal">null</span>)</span><br><span class="line">                        .collect(Collectors.toList());</span><br><span class="line">                mappings.clear();</span><br><span class="line">                mappings.addAll(copy);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class="line">            <span class="keyword">private</span> List&lt;RequestMappingInfoHandlerMapping&gt; <span class="title function_">getHandlerMappings</span><span class="params">(Object bean)</span> &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> ReflectionUtils.findField(bean.getClass(), <span class="string">&quot;handlerMappings&quot;</span>);</span><br><span class="line">                    field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">                    <span class="keyword">return</span> (List&lt;RequestMappingInfoHandlerMapping&gt;) field.get(bean);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IllegalArgumentException | IllegalAccessException e) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalStateException</span>(e);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//在项目启动后，控制台输出接口文档访问地址信息</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onApplicationEvent</span><span class="params">(WebServerInitializedEvent event)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//获取IP</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">hostAddress</span> <span class="operator">=</span> Inet4Address.getLocalHost().getHostAddress();</span><br><span class="line">            log.info(<span class="string">&quot;项目启动成功！swagger接口文档地址: http://&quot;</span>+hostAddress+<span class="string">&quot;:&quot;</span>+event.getWebServer().getPort()+<span class="string">&quot;/swagger-ui/index.html&quot;</span>);</span><br><span class="line">            log.info(<span class="string">&quot;项目启动成功！Knife4j接口文档地址: http://&quot;</span>+hostAddress+<span class="string">&quot;:&quot;</span>+event.getWebServer().getPort()+<span class="string">&quot;/doc.html&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (UnknownHostException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Swagger常用注解"><a href="#Swagger常用注解" class="headerlink" title="Swagger常用注解"></a>Swagger常用注解</h3><ul><li>@Api：用于标注一个Controller，使其能被Swagger扫描解析</li><li>@ApiOperation：用于标注一个Http请求，也就是我们写的接口</li><li>@ApiParam：用于定义请求中的api参数的注解</li><li>@ApiResponses、@ApiResponse：用于定义方法返回对象的描述</li><li>@ApiModel：用于描述模型类的注解</li><li>@ApiModelProperty：用于描述模型类的属性的注解</li><li>示例：<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"> <span class="meta">@RestController</span></span><br><span class="line"> <span class="meta">@RequestMapping(&quot;/xxx&quot;)</span></span><br><span class="line"> <span class="meta">@Api(tags = &quot;xx管理&quot;, value = &quot;xxController&quot;)</span></span><br><span class="line"> <span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">xxController</span> &#123;</span><br><span class="line"> </span><br><span class="line">     <span class="meta">@Autowired</span></span><br><span class="line">     <span class="keyword">private</span> xxService xxService;</span><br><span class="line">     </span><br><span class="line">     <span class="meta">@ApiResponses(&#123;</span></span><br><span class="line"><span class="meta">@ApiResponse(code = 200, message = &quot;请求成功&quot;),</span></span><br><span class="line"><span class="meta">@ApiResponse(code = 400, message = &quot;请求参数没填好&quot;),</span></span><br><span class="line"><span class="meta">@ApiResponse(code = 404, message = &quot;请求路径没有或页面跳转路径不对&quot;)</span></span><br><span class="line"><span class="meta">   &#125;)</span></span><br><span class="line">     <span class="meta">@ApiOperation(value = &quot;通过id编辑name&quot;)</span></span><br><span class="line">     <span class="meta">@PostMapping(&quot;edit&quot;)</span></span><br><span class="line">     <span class="keyword">public</span> Result <span class="title function_">edit</span><span class="params">(<span class="meta">@RequestParam</span> <span class="meta">@ApiParam(name = &quot;id&quot;, value = &quot;id&quot;)</span> String id,</span></span><br><span class="line"><span class="params">                        <span class="meta">@RequestParam</span> <span class="meta">@ApiParam(name = &quot;name&quot;, value = &quot;名称&quot;)</span> String name)</span> &#123;</span><br><span class="line">         xxService.edit(id, name);</span><br><span class="line">         <span class="keyword">return</span> Result.ok();</span><br><span class="line">     &#125;</span><br><span class="line"> </span><br><span class="line"> &#125;</span><br><span class="line"> <span class="meta">@Data</span></span><br><span class="line"> <span class="meta">@ApiModel(description = &quot;xx查询DTO&quot;)</span></span><br><span class="line"> <span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">xxQueryDTO</span> &#123;</span><br><span class="line">     <span class="meta">@ApiModelProperty(value = &quot;id&quot;)</span></span><br><span class="line">     <span class="keyword">private</span> String id;</span><br><span class="line"> </span><br><span class="line">     <span class="meta">@ApiModelProperty(value = &quot;关键字&quot;)</span></span><br><span class="line">     <span class="keyword">private</span> String KeyWord;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java基础--String（）创建了几个对象，String字符串==比较</title>
      <link href="/posts/scjljgdxszfcbj/"/>
      <url>/posts/scjljgdxszfcbj/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h4 id="知识补充"><a href="#知识补充" class="headerlink" title="知识补充"></a>知识补充</h4><ul><li>在JDK6之前，字符串常量池存放在永久代；在JDK6之后，字符串常量池存放在Java堆内。</li><li>字符串常量池中不会存储相同内容的字符串。</li><li>==intern()方法==：如果字符串常量池中没有对应的字符串的话，会先在字符串常量池中生成该字符串，然后返回对象的地址，如果存在对应的字符串，则直接返回字符串常量的地址。<h4 id="通过字面量创建字符串"><a href="#通过字面量创建字符串" class="headerlink" title="通过字面量创建字符串"></a>通过字面量创建字符串</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">s1</span> <span class="operator">=</span> <span class="string">&quot;Java&quot;</span>;</span><br><span class="line">System.out.print(s1.intern()==s1);    <span class="comment">//true</span></span><br></pre></td></tr></table></figure></li><li>执行上述语句时，如果字符串常量池中没有“Java”这个字符串，会在字符串常量池中先创建“Java”字符串对象，然后将s1指向该对象的地址；如果字符串常量池中已经存在“Java”字符串对象，则无需创建对象，直接将s1指向字符串常量池中的对象。</li><li>s1.intern()也是指向字符串常量池中的对象，所以输出语句输出结果为true。</li><li>故上述语句创建0个或者1个对象。<h4 id="通过new关键字创建字符串"><a href="#通过new关键字创建字符串" class="headerlink" title="通过new关键字创建字符串"></a>通过new关键字创建字符串</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">s2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&quot;Python&quot;</span>);</span><br><span class="line">System.out.print(s2.intern()==s2);    <span class="comment">//false</span></span><br></pre></td></tr></table></figure></li><li>执行上述语句时，会先检查字符串常量池存不存在“Python”这个字符串，不存在则在字符串常量池中创建该字符串对象，再去Java堆中创建“Python”字符串对象，并将s2指向堆中对象的地址。</li><li>s2.intern()也是指向字符串常量池中的对象，所以输出语句输出结果为false。</li><li>故上述语句创建1个或者2个对象。<h4 id="字符串拼接创建字符串"><a href="#字符串拼接创建字符串" class="headerlink" title="字符串拼接创建字符串"></a>字符串拼接创建字符串</h4><h5 id="字符串常量的拼接"><a href="#字符串常量的拼接" class="headerlink" title="字符串常量的拼接"></a>字符串常量的拼接</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">s3</span> <span class="operator">=</span> <span class="string">&quot;Er&quot;</span>+<span class="string">&quot;lang&quot;</span>;</span><br></pre></td></tr></table></figure></li><li>执行上述语句，jvm编译阶段通过编译器优化后，会把字符串常量直接合并成“Erlang”，相当于 String s3 = “Erlang” 此时若字符串常量池中没有“Erlang”则创建该字符串对象，并将s3指向该对象，若字符串常量池中已经存在“Erlang”，则不创建，直接将s3指向该对象。</li><li>故上述语句创建0个或者1个对象。<h5 id="字符串变量的拼接"><a href="#字符串变量的拼接" class="headerlink" title="字符串变量的拼接"></a>字符串变量的拼接</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">s4</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&quot;Go&quot;</span>)+<span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&quot;lang&quot;</span>);</span><br></pre></td></tr></table></figure></li><li>假设字符串常量池中不存在“Go”和“lang”字符串对象。执行该语句，先去字符串常量池中创建“Go”,”lang”两个对象，然后再去Java堆中创建“Go”，“lang”两个对象，使用+号拼接时，内部创建了一个StringBuilder对象，通过append()方法拼接，最后调用StringBuilder的tostring()方法得到一个String对象”Golang“，并把它赋值给s4。</li><li>注意此时字符串常量池中并没有“Golang”字符串对象。</li><li>故上述语句创建了6个对象（字符串常量池一开始不存在字符串的情况下）。<h6 id="这时的intern-方法还有点小细节"><a href="#这时的intern-方法还有点小细节" class="headerlink" title="这时的intern()方法还有点小细节"></a>这时的intern()方法还有点小细节</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">s4</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&quot;Go&quot;</span>)+<span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&quot;lang&quot;</span>); <span class="comment">//语句1</span></span><br><span class="line">s4.intern();                                     <span class="comment">//语句2</span></span><br><span class="line"><span class="type">String</span> <span class="variable">s5</span> <span class="operator">=</span> <span class="string">&quot;Golang&quot;</span>;                            <span class="comment">//语句3</span></span><br><span class="line">System.out.print(s4==s5);  <span class="comment">//jdk6返回false，jdk7/8返回true</span></span><br></pre></td></tr></table></figure></li><li>从上文得知，语句1并没有在字符串常量池中生成”Golang“字符串对象。<ol><li>在jdk6版本，执行intern()方法，如果常量池中没有该字符串对象，则会在字符串常量池新建一个字符串对象。此时s5就会指向intern方法生成的这个常量池中的字符串对象，输出语句返回的结果为false。<br><img src="https://gcore.jsdelivr.net/gh/zhengmuxin/picb/4bb12b1674ce458094547fe5fd0bb7c8.png" alt=""><br>2.在jdk7/8版本，字符串常量池被转移到了java堆中，执行完intern()方法后， 如果常量池中没有该字符串对象，则会把此对象在堆中的引用地址复制一份，放入字符串常量池中，并返回字符串常量池中的引用地址。此时输出语句返回的结果是true。<br><img src="https://gcore.jsdelivr.net/gh/zhengmuxin/picb/6e9865aa62d54969897fcf25409b1681.png" alt=""><h4 id="一些字符串”-“比较练习"><a href="#一些字符串”-“比较练习" class="headerlink" title="一些字符串”==“比较练习"></a>一些字符串”==“比较练习</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">      <span class="comment">/* String 比较 */</span></span><br><span class="line"><span class="type">String</span> <span class="variable">aa</span> <span class="operator">=</span> <span class="string">&quot;abc&quot;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">bb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&quot;abc&quot;</span>);</span><br><span class="line"><span class="type">String</span> <span class="variable">cc</span> <span class="operator">=</span> <span class="string">&quot;abc&quot;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">dd</span> <span class="operator">=</span> <span class="string">&quot;ab&quot;</span>;</span><br><span class="line">System.out.println(aa == (dd + <span class="string">&quot;c&quot;</span>)); <span class="comment">// false</span></span><br><span class="line">System.out.println(aa == (<span class="string">&quot;ab&quot;</span> + <span class="string">&quot;c&quot;</span>)); <span class="comment">// true</span></span><br><span class="line">System.out.println(aa == cc); <span class="comment">// true</span></span><br><span class="line">System.out.println(aa == bb); <span class="comment">// false</span></span><br><span class="line">System.out.println(aa.equals(dd + <span class="string">&quot;c&quot;</span>)); <span class="comment">// true</span></span><br><span class="line">System.out.println(<span class="string">&quot;------------------------&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="type">String</span> <span class="variable">s1</span> <span class="operator">=</span> <span class="string">&quot;coder&quot;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">s2</span> <span class="operator">=</span> <span class="string">&quot;coder&quot;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">s3</span> <span class="operator">=</span> <span class="string">&quot;coder&quot;</span> + s2;</span><br><span class="line"><span class="type">String</span> <span class="variable">s4</span> <span class="operator">=</span> <span class="string">&quot;coder&quot;</span> + <span class="string">&quot;coder&quot;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">s5</span> <span class="operator">=</span> s1 + s2;</span><br><span class="line"><span class="type">String</span> <span class="variable">s6</span> <span class="operator">=</span> s1 + s1;</span><br><span class="line">System.out.println(s4 == s5); <span class="comment">// false</span></span><br><span class="line">System.out.println(s6 == s5); <span class="comment">// false</span></span><br><span class="line">System.out.println(s3 == s5); <span class="comment">// false</span></span><br><span class="line">System.out.println(s4 == <span class="string">&quot;codercoder&quot;</span>); <span class="comment">// true</span></span><br><span class="line">System.out.println(s5 == <span class="string">&quot;codercoder&quot;</span>); <span class="comment">// false</span></span><br><span class="line">System.out.println(s3 == <span class="string">&quot;codercoder&quot;</span>); <span class="comment">// false</span></span><br></pre></td></tr></table></figure><h4 id="打印字符串对象地址的方法"><a href="#打印字符串对象地址的方法" class="headerlink" title="打印字符串对象地址的方法"></a>打印字符串对象地址的方法</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">s1</span> <span class="operator">=</span> <span class="string">&quot;coder&quot;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">s2</span> <span class="operator">=</span> <span class="string">&quot;coder&quot;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">s4</span> <span class="operator">=</span> <span class="string">&quot;coder&quot;</span> + <span class="string">&quot;coder&quot;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">s5</span> <span class="operator">=</span> s1 + s2;</span><br><span class="line"><span class="type">String</span> <span class="variable">s6</span> <span class="operator">=</span> s1 + s1;</span><br><span class="line">System.out.println(String.class.getName() + <span class="string">&quot;@&quot;</span> + Integer.toHexString(System.identityHashCode(s4)));</span><br><span class="line">System.out.println(String.class.getName() + <span class="string">&quot;@&quot;</span> + Integer.toHexString(System.identityHashCode(s4)));</span><br><span class="line">System.out.println(String.class.getName() + <span class="string">&quot;@&quot;</span> + Integer.toHexString(System.identityHashCode(s5)));</span><br><span class="line">System.out.println(String.class.getName() + <span class="string">&quot;@&quot;</span> + Integer.toHexString(System.identityHashCode(s6)));</span><br><span class="line">System.out.println(String.class.getName() + <span class="string">&quot;@&quot;</span> + Integer.toHexString(System.identityHashCode(<span class="string">&quot;codercoder&quot;</span>)));</span><br><span class="line"></span><br><span class="line"><span class="comment">//console:</span></span><br><span class="line">java.lang.String@1c4af82c</span><br><span class="line">java.lang.String@379619aa</span><br><span class="line">java.lang.String<span class="meta">@cac736f</span></span><br><span class="line">java.lang.String@1c4af82c</span><br></pre></td></tr></table></figure><div class="author-content author-content-item fcirclePage single" style="background: url(https://img.tukuppt.com/ad_preview/00/04/85/5c98ca4060076.jpg!/fw/980) left 28% / cover no-repeat !important;"><div class="card-content"><div class="author-content-item-tips">书籍书虫</div><span class="author-content-item-title">即使再忙，也不要忘记用书籍充实自己</span><div class="content-bottom"> <div class="tips">和 七鳄学习格一起阅读书籍</div></div><div class="banner-button-group"> <a class="banner-button" href="" https:="" www.douban.com="" people="" hyh0816="" draggable="false" data-pjax-state="">   <i class="anzhiyufont anzhiyu-icon-arrow-circle-right" style="font-size: 1.5rem">   </i>   <span class="banner-button-text">豆瓣主页</span> </a></div></div></div></li></ol></li></ul>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Java基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java基础--接口和抽象类的区别（接口中的默认，静态，私有方法）的学习笔记</title>
      <link href="/posts/javajcjkhcxldqb/"/>
      <url>/posts/javajcjkhcxldqb/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h4 id="接口与抽象类的区别"><a href="#接口与抽象类的区别" class="headerlink" title="接口与抽象类的区别"></a>接口与抽象类的区别</h4><h5 id="相同点"><a href="#相同点" class="headerlink" title="相同点"></a>相同点</h5><ul><li>接口的实现或抽象类的子类需要实现接口或抽象类中相应的方法才能被实例化。</li><li>接口和抽象类不可以被实例化。</li></ul><h5 id="不同点"><a href="#不同点" class="headerlink" title="不同点"></a>不同点</h5><ul><li>抽象类可以有构造方法，而接口不可以有。<ul><li>既然抽象类并不能实例化，那抽象类中的构造函数存在的意义是什么？<ul><li>抽象类必须被子类继承来实现。</li><li>子类在调用父类时，无论自己有没有构造方法都会先去执行父类无参的函数，哪怕父类是抽象类。虽然抽象类不能被实例化，但是可以在构造方法中初始化一些参数，也可以在子类中调用父类的构造方法。</li></ul></li></ul></li><li>抽象类的成员变量可以是常量，也可以是非常量；而接口的变量只能是常量，接口中的变量会被隐式的被public static final来修饰（并且只能用public static final来修饰）。</li><li>抽象类的成员方法：既可以有普通方法也可以有抽象方法；而接口在jdk1.7只能包含抽象方法，默认修饰符：public abstract，在jdk1.8可以有默认方法和静态方法，在jdk1.9可以有私有方法。</li><li>一个类可以实现多个接口，但只能继承一个类。</li><li>声明接口的关键字是interface，实现接口的关键字是implements，与抽象类的关键字不同。</li><li>设计理念不同：接口和抽象类的概念不一样。接口是对动作的抽象，抽象类是对根源的抽象。抽象类表示的是，这个对象是什么。是“A is a B”，接口表示的是，这个对象能做什么，表示“A is like B”。例如：防盗门是个门，同时它还有密码锁的功能，此时可以如此设计：防盗门继承了门这个抽象类，并且实现了密码锁的功能。</li></ul><h4 id="接口中的方法"><a href="#接口中的方法" class="headerlink" title="接口中的方法"></a>接口中的方法</h4><h5 id="JDK1-7"><a href="#JDK1-7" class="headerlink" title="JDK1.7"></a>JDK1.7</h5><ul><li>在jdk1.7中，接口只能拥有抽象方法（没有方法体的方法），子类想要实现接口，必须实现接口中所有的抽象方法，即使子类并不需要这个方法。并且如果一个接口新增了一个方法，那么所有实现了这个接口的类都要去修改，实现它的这个新方法。</li></ul><h5 id="JDK1-8"><a href="#JDK1-8" class="headerlink" title="JDK1.8"></a>JDK1.8</h5><ul><li>在jdk中1.8中，加入了由default修饰的默认方法，该方法可以使得实现类在不需要使用该方法时，不用去重写空实现，需要该方法时，才去重写默认方法；同时接口新增方法时，也可以先将新增方法设置为默认方法，避免产生大量修改。</li><li>jdk1.8还加入了由static关键字修饰的静态方法，通过static关键字修饰的方法在接口中不可被修改。一些不想被扩展覆盖的方法就可以用static修饰。</li><li>注意点：<ol><li>接口默认方法、静态方法可以有多个。</li><li>默认方法通过实例调用，静态方法则通过接口名调用。</li><li>default默认方法关键字只能用在接口中。</li><li>静态方法不能被继承及覆盖，所以只被具体所在的接口调用。</li><li>默认方法可以被继承，如果继承了多个接口，多个接口都定义了多个同样的默认方法，实现类需要重写默认方法否则会报错。</li></ol></li></ul><h5 id="JDK1-9"><a href="#JDK1-9" class="headerlink" title="JDK1.9"></a>JDK1.9</h5><ul><li>JDK1.9之后，接口又加入了由private修饰的私有方法，当两个默认方法或者静态方法中包含一段相同的代码实现时，程序必然考虑将这段实现代码抽象成一个共性方法，而这个共性方法是不需要让别人使用的,因此用私有给隐藏起来了，这就是增加私有方法的必然性。</li><li>默认方法可以调用私有的静态方法和非静态方法。</li><li>静态方法只能调用私有的静态方法。</li><li>私有方法只能在接口中调用。</li></ul>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Java基础 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
